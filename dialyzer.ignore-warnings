:0: Unknown function 'Elixir.Aewallet.KeyPair':compress/1
:0: Unknown function 'Elixir.Aewallet.KeyPair':derive/2
:0: Unknown function 'Elixir.Aewallet.KeyPair':generate_master_key/1
:0: Unknown function 'Elixir.Aewallet.KeyPair':generate_pub_key/1
:0: Unknown function 'Elixir.Aewallet.Signing':sign/2
:0: Unknown function 'Elixir.Aewallet.Signing':verify/3
:0: Unknown function 'Elixir.Aewallet.Wallet':create_wallet/2
:0: Unknown function 'Elixir.Aewallet.Wallet':get_private_key/3
:0: Unknown function 'Elixir.Aewallet.Wallet':get_public_key/3
:0: Unknown function 'Elixir.Aewallet.Wallet':get_seed/2
:0: Unknown function 'Elixir.ExJsonSchema.Schema':resolve/1
:0: Unknown function 'Elixir.ExJsonSchema.Validator':validate/2
:0: Unknown function 'Elixir.MerklePatriciaTree.DB.ExternalDB':init/1
:0: Unknown function 'Elixir.MerklePatriciaTree.Proof':construct_proof/1
:0: Unknown function 'Elixir.MerklePatriciaTree.Proof':verify_proof/4
:0: Unknown function 'Elixir.MerklePatriciaTree.Trie':delete/2
:0: Unknown function 'Elixir.MerklePatriciaTree.Trie':get/2
:0: Unknown function 'Elixir.MerklePatriciaTree.Trie':new/1
:0: Unknown function 'Elixir.MerklePatriciaTree.Trie':new/2
:0: Unknown function 'Elixir.MerklePatriciaTree.Trie':update/3
:0: Unknown function 'Elixir.Msgpax':'pack!'/1
:0: Unknown function 'Elixir.Msgpax':'pack!'/2
:0: Unknown function 'Elixir.Msgpax':unpack/1
:0: Unknown function base58:base58_to_binary/1
:0: Unknown function base58:binary_to_base58/1
:0: Unknown function enacl:generichash/2
:0: Unknown function sha3:hash/2
:0: Unknown type 'Elixir.Account':t/0
:0: Unknown type 'Elixir.Aecore.Account.Account':pubkey/0
:0: Unknown type 'Elixir.Aecore.Chain.ChainState':account/0
:0: Unknown type 'Elixir.Aecore.Chain.ChainState':chainstate/0
:0: Unknown type 'Elixir.Aecore.Chain.ChainState':naming/0
:0: Unknown type 'Elixir.Aecore.Chain.Chainstate':account_chainstate/0
:0: Unknown type 'Elixir.Aecore.Chain.Chainstate':accounts/0
:0: Unknown type 'Elixir.Aecore.Chain.Chainstate':chainstate/0
:0: Unknown type 'Elixir.Aecore.Structures.OracleExtendTx':t/0
:0: Unknown type 'Elixir.Aecore.Structures.OracleQueryTx':t/0
:0: Unknown type 'Elixir.Aecore.Structures.OracleRegistrationTx':t/0
:0: Unknown type 'Elixir.Aecore.Structures.OracleResponseTx':t/0
:0: Unknown type 'Elixir.Aecore.Tx.DataTx':paload/0
:0: Unknown type 'Elixir.Block':t/0
:0: Unknown type 'Elixir.ChainState':account/0
:0: Unknown type 'Elixir.ChainState':account_chainstate/0
:0: Unknown type 'Elixir.ChainState':t/0
:0: Unknown type 'Elixir.Chainstate':chain_state_types/0
:0: Unknown type 'Elixir.Chainstate':t/0
:0: Unknown type 'Elixir.List':t/0
:0: Unknown type 'Elixir.MerklePatriciaTree.Trie':key/0
:0: Unknown type 'Elixir.MerklePatriciaTree.Trie':t/0
:0: Unknown type 'Elixir.MerklePatriciaTree.Trie':value/0
:0: Unknown type 'Elixir.NameTransferTx':t/0
:0: Unknown type 'Elixir.SignedTx':t/0
:0: Unknown type 'Elixir.Wallet':pubkey/0
:0: Unknown type 'Elixir.AccountsStateTree':accounts_state/0
:0: Unknown type 'Elixir.Aecore.Chain.ChainState':accounts/0
:0: Unknown type 'Elixir.Aecore.Oracle.Oracle':oracles/0
:0: Unknown type 'Elixir.ChainState':accounts/0
:0: Unknown type 'Elixir.ChainState':chainstate/0
:0: Unknown type 'Elixir.NameCaimTx':t/0
:0: Unknown type 'Elixir.NameClaimTx':t/0
:0: Unknown type 'Elixir.OracleExtendTx':t/0
:0: Unknown type 'Elixir.Signature':t/0
:0: Unknown function 'Elixir.MerklePatriciaTree.Trie.Inspector':all_keys/1
The pattern {'ok', Vaccount_state@1} can never match the type binary() | #{'__struct__':='Elixir.Aecore.Account.Account', 'balance':=non_neg_integer(), 'last_updated':=non_neg_integer(), 'nonce':=non_neg_integer()}
The created fun has no local return
The pattern {'ok', Vupdated_chainstate@1} can never match the type #{'__struct__':='Elixir.Aecore.Chain.Chainstate', 'accounts':=gb_merkle_trees:tree(), 'naming':=#{binary()=>#{'expires':=non_neg_integer(), 'hash':=binary(), 'owner':=binary(), 'created'=>non_neg_integer(), 'name'=>binary(), 'pointers'=>[any()], 'status'=>'claimed' | 'revoked', 'ttl'=>non_neg_integer()}}, 'oracles':=#{'interaction_objects':=#{binary()=>#{'query':=#{'__struct__':='Elixir.Aecore.Oracle.Tx.OracleQueryTx', 'oracle_address':=binary(), 'query_data':=_, 'query_fee':=non_neg_integer(), 'query_ttl':=#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'response_ttl':=#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}}, 'query_height_included':=non_neg_integer(), 'response':=#{'__struct__':='Elixir.Aecore.Oracle.Tx.OracleResponseTx', 'query_id':=binary(), 'response':=map()}, 'response_height_included':=non_neg_integer()}}, 'registered_oracles':=#{binary()=>#{'height_included':=non_neg_integer(), 'tx':=#{'__struct__':='Elixir.Aecore.Oracle.Tx.OracleRegistrationTx', 'query_fee':=non_neg_integer(), 'query_format':=map(), 'response_format':=map(), 'ttl':=#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}}}}}}
The pattern {'error', Vreason@1} can never match the type #{'__struct__':='Elixir.Aecore.Chain.Chainstate', 'accounts':=gb_merkle_trees:tree(), 'naming':=#{binary()=>#{'expires':=non_neg_integer(), 'hash':=binary(), 'owner':=binary(), 'created'=>non_neg_integer(), 'name'=>binary(), 'pointers'=>[any()], 'status'=>'claimed' | 'revoked', 'ttl'=>non_neg_integer()}}, 'oracles':=#{'interaction_objects':=#{binary()=>#{'query':=#{'__struct__':='Elixir.Aecore.Oracle.Tx.OracleQueryTx', 'oracle_address':=binary(), 'query_data':=_, 'query_fee':=non_neg_integer(), 'query_ttl':=#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'response_ttl':=#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}}, 'query_height_included':=non_neg_integer(), 'response':=#{'__struct__':='Elixir.Aecore.Oracle.Tx.OracleResponseTx', 'query_id':=binary(), 'response':=map()}, 'response_height_included':=non_neg_integer()}}, 'registered_oracles':=#{binary()=>#{'height_included':=non_neg_integer(), 'tx':=#{'__struct__':='Elixir.Aecore.Oracle.Tx.OracleRegistrationTx', 'query_fee':=non_neg_integer(), 'query_format':=map(), 'response_format':=map(), 'ttl':=#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}}}}}}
The call 'Elixir.Aecore.Tx.SignedTx':reward(Vdata@1::#{'payload':=#{'receiver':=_, _=>_}, 'sender':='nil', _=>_},Vreceiver_state@1::#{'__struct__':='Elixir.Aecore.Account.Account', 'balance':=0, 'last_updated':=0, 'nonce':=0}) breaks the contract ('Elixir.Aecore.Tx.DataTx':t(),'Elixir.Account':t()) -> 'Elixir.Account':t()
The pattern 'ok' can never match the type binary() | {'error',<<_:64,_:_*8>>} | #{'__struct__':='Elixir.Aecore.Account.Account', 'balance':=non_neg_integer(), 'last_updated':=non_neg_integer(), 'nonce':=non_neg_integer()}
The pattern {'ok', Vupdated_chainstate@2} can never match the type #{'__struct__':='Elixir.Aecore.Chain.Chainstate', 'accounts':=gb_merkle_trees:tree(), 'naming':=#{binary()=>#{'expires':=non_neg_integer(), 'hash':=binary(), 'owner':=binary(), 'created'=>non_neg_integer(), 'name'=>binary(), 'pointers'=>[any()], 'status'=>'claimed' | 'revoked', 'ttl'=>non_neg_integer()}}, 'oracles':=#{'interaction_objects':=#{binary()=>#{'query':=#{'__struct__':='Elixir.Aecore.Oracle.Tx.OracleQueryTx', 'oracle_address':=binary(), 'query_data':=_, 'query_fee':=non_neg_integer(), 'query_ttl':=#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'response_ttl':=#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}}, 'query_height_included':=non_neg_integer(), 'response':=#{'__struct__':='Elixir.Aecore.Oracle.Tx.OracleResponseTx', 'query_id':=binary(), 'response':=map()}, 'response_height_included':=non_neg_integer()}}, 'registered_oracles':=#{binary()=>#{'height_included':=non_neg_integer(), 'tx':=#{'__struct__':='Elixir.Aecore.Oracle.Tx.OracleRegistrationTx', 'query_fee':=non_neg_integer(), 'query_format':=map(), 'response_format':=map(), 'ttl':=#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}}}}}}
The pattern {'error', Vreason@1} can never match the type #{'__struct__':='Elixir.Aecore.Chain.Chainstate', 'accounts':=gb_merkle_trees:tree(), 'naming':=#{binary()=>#{'expires':=non_neg_integer(), 'hash':=binary(), 'owner':=binary(), 'created'=>non_neg_integer(), 'name'=>binary(), 'pointers'=>[any()], 'status'=>'claimed' | 'revoked', 'ttl'=>non_neg_integer()}}, 'oracles':=#{'interaction_objects':=#{binary()=>#{'query':=#{'__struct__':='Elixir.Aecore.Oracle.Tx.OracleQueryTx', 'oracle_address':=binary(), 'query_data':=_, 'query_fee':=non_neg_integer(), 'query_ttl':=#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'response_ttl':=#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}}, 'query_height_included':=non_neg_integer(), 'response':=#{'__struct__':='Elixir.Aecore.Oracle.Tx.OracleResponseTx', 'query_id':=binary(), 'response':=map()}, 'response_height_included':=non_neg_integer()}}, 'registered_oracles':=#{binary()=>#{'height_included':=non_neg_integer(), 'tx':=#{'__struct__':='Elixir.Aecore.Oracle.Tx.OracleRegistrationTx', 'query_fee':=non_neg_integer(), 'query_format':=map(), 'response_format':=map(), 'ttl':=#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}}}}}}
Function handle_info/2 has no local return
The call 'Elixir.Aeutil.Serialization':remove_struct(Vchain_states@1::'not_found' | {'error',_} | {'ok',map()}) breaks the contract ([any()]) -> [any()]
    ; (map()) -> map() in the 1st argument
Function mine_sync_block_to_chain/0 has no local return
Function candidate/0 has no local return
Function create_coinbase_tx/2 has no local return
The call 'Elixir.Aecore.Tx.DataTx':init('Elixir.Aecore.Account.Tx.SpendTx',Vpayload@1::#{'amount':=number(), 'receiver':=_},'nil',0,0) breaks the contract (tx_types(),payload(),binary(),integer(),integer()) -> 'Elixir.Aecore.Tx.DataTx':t()
The call 'Elixir.Aecore.Oracle.Oracle':'tx_ttl_is_valid?'(Vtx@1::#{'__struct__':='Elixir.Aecore.Tx.SignedTx', 'data':=#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=#{'__struct__':='Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Oracle.Tx.OracleExtendTx' | 'Elixir.Aecore.Oracle.Tx.OracleQueryTx' | 'Elixir.Aecore.Oracle.Tx.OracleRegistrationTx' | 'Elixir.Aecore.Oracle.Tx.OracleResponseTx', _=>_}, 'sender':=binary(), 'type':='Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Structures.OracleExtendTx' | 'Elixir.Aecore.Structures.OracleRegistrationTx' | 'Elixir.Aecore.Structures.OracleResponseTx'}, 'signature':=binary()},Vblock_height@1::pos_integer()) breaks the contract (oracle_txs_with_ttl(),non_neg_integer()) -> boolean()
Function create_block/5 will never be called
Overloaded contract for 'Elixir.Aecore.Naming.NameUtil':validate_label_length/1 has overlapping domains; such contracts are currently unsupported and are simply ignored
The return type {gb_merkle_trees:tree(),_} in the specification of process_chainstate/7 is not a subtype of {'error' | gb_merkle_trees:tree(),binary() | map()}, which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specified type for the 3rd argument of preprocess_check/7 (gb_merkle_trees:tree()) is not a supertype of #{'__struct__':='Elixir.Aecore.Account.Account', 'balance':=non_neg_integer(), 'last_updated':=non_neg_integer(), 'nonce':=non_neg_integer()}, which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
Invalid type specification for function 'Elixir.Aecore.Naming.Tx.NameClaimTx':preprocess_check/7. The success typing is (atom() | #{'name':=binary(), 'name_salt':=binary(), _=>_},_,atom() | #{'balance':=number(), _=>_},number(),_,_,map()) -> 'ok' | {'error',<<_:64,_:_*8>>}
The return type any() in the specification of deduct_fee/2 is not a subtype of #{'__struct__':='Elixir.Aecore.Account.Account', 'balance':=non_neg_integer(), 'last_updated':=non_neg_integer(), 'nonce':=non_neg_integer()}, which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The return type {gb_merkle_trees:tree(),_} in the specification of process_chainstate/7 is not a subtype of {'error' | gb_merkle_trees:tree(),binary() | map()}, which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specified type for the 3rd argument of preprocess_check/7 (gb_merkle_trees:tree()) is not a supertype of #{'__struct__':='Elixir.Aecore.Account.Account', 'balance':=non_neg_integer(), 'last_updated':=non_neg_integer(), 'nonce':=non_neg_integer()}, which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
Invalid type specification for function 'Elixir.Aecore.Naming.Tx.NamePreClaimTx':preprocess_check/7. The success typing is (_,_,atom() | #{'balance':=number(), _=>_},number(),_,_,_) -> 'ok' | {'error',<<_:64,_:_*8>>}
The return type any() in the specification of deduct_fee/2 is not a subtype of #{'__struct__':='Elixir.Aecore.Account.Account', 'balance':=non_neg_integer(), 'last_updated':=non_neg_integer(), 'nonce':=non_neg_integer()}, which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The return type {gb_merkle_trees:tree(),_} in the specification of process_chainstate/7 is not a subtype of {'error' | gb_merkle_trees:tree(),binary() | map()}, which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specified type for the 3rd argument of preprocess_check/7 (gb_merkle_trees:tree()) is not a supertype of #{'__struct__':='Elixir.Aecore.Account.Account', 'balance':=non_neg_integer(), 'last_updated':=non_neg_integer(), 'nonce':=non_neg_integer()}, which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
Invalid type specification for function 'Elixir.Aecore.Naming.Tx.NameRevokeTx':preprocess_check/7. The success typing is (atom() | #{'hash':=_, _=>_},_,atom() | #{'balance':=number(), _=>_},number(),_,_,map()) -> 'ok' | {'error',<<_:64,_:_*8>>}
The return type any() in the specification of deduct_fee/2 is not a subtype of #{'__struct__':='Elixir.Aecore.Account.Account', 'balance':=non_neg_integer(), 'last_updated':=non_neg_integer(), 'nonce':=non_neg_integer()}, which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The return type {gb_merkle_trees:tree(),_} in the specification of process_chainstate/7 is not a subtype of {'error' | gb_merkle_trees:tree(),binary() | map()}, which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specified type for the 3rd argument of preprocess_check/7 (gb_merkle_trees:tree()) is not a supertype of #{'__struct__':='Elixir.Aecore.Account.Account', 'balance':=non_neg_integer(), 'last_updated':=non_neg_integer(), 'nonce':=non_neg_integer()}, which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
Invalid type specification for function 'Elixir.Aecore.Naming.Tx.NameTransferTx':preprocess_check/7. The success typing is (atom() | #{'hash':=_, _=>_},_,atom() | #{'balance':=number(), _=>_},number(),_,_,map()) -> 'ok' | {'error',<<_:64,_:_*8>>}
The return type any() in the specification of deduct_fee/2 is not a subtype of #{'__struct__':='Elixir.Aecore.Account.Account', 'balance':=non_neg_integer(), 'last_updated':=non_neg_integer(), 'nonce':=non_neg_integer()}, which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The return type {gb_merkle_trees:tree(),_} in the specification of process_chainstate/7 is not a subtype of {'error' | gb_merkle_trees:tree(),binary() | map()}, which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specified type for the 3rd argument of preprocess_check/7 (gb_merkle_trees:tree()) is not a supertype of #{'__struct__':='Elixir.Aecore.Account.Account', 'balance':=non_neg_integer(), 'last_updated':=non_neg_integer(), 'nonce':=non_neg_integer()}, which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
Invalid type specification for function 'Elixir.Aecore.Naming.Tx.NameUpdateTx':preprocess_check/7. The success typing is (atom() | #{'hash':=_, _=>_},_,atom() | #{'balance':=number(), _=>_},number(),_,_,map()) -> 'ok' | {'error',<<_:64,_:_*8>>}
The return type any() in the specification of deduct_fee/2 is not a subtype of #{'__struct__':='Elixir.Aecore.Account.Account', 'balance':=non_neg_integer(), 'last_updated':=non_neg_integer(), 'nonce':=non_neg_integer()}, which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
Function register/5 has no local return
The call 'Elixir.Aecore.Tx.DataTx':init('Elixir.Aecore.Oracle.Tx.OracleRegistrationTx',Vpayload@1::#{'query_fee':=_, 'query_format':=_, 'response_format':=_, 'ttl':=_},binary(),Vfee@1::any(),non_neg_integer()) breaks the contract (tx_types(),payload(),binary(),integer(),integer()) -> 'Elixir.Aecore.Tx.DataTx':t()
Function query/6 has no local return
The call 'Elixir.Aecore.Tx.DataTx':init('Elixir.Aecore.Oracle.Tx.OracleQueryTx',Vpayload@1::#{'oracle_address':=_, 'query_data':=_, 'query_fee':=_, 'query_ttl':=_, 'response_ttl':=_},binary(),Vfee@1::any(),non_neg_integer()) breaks the contract (tx_types(),payload(),binary(),integer(),integer()) -> 'Elixir.Aecore.Tx.DataTx':t()
Function respond/3 has no local return
The call 'Elixir.Aecore.Tx.DataTx':init('Elixir.Aecore.Oracle.Tx.OracleResponseTx',Vpayload@1::#{'query_id':=_, 'response':=_},binary(),Vfee@1::any(),non_neg_integer()) breaks the contract (tx_types(),payload(),binary(),integer(),integer()) -> 'Elixir.Aecore.Tx.DataTx':t()
Function extend/2 has no local return
The call 'Elixir.Aecore.Tx.DataTx':init('Elixir.Aecore.Oracle.Tx.OracleExtendTx',Vpayload@1::#{'ttl':=_},binary(),Vfee@1::any(),non_neg_integer()) breaks the contract (tx_types(),payload(),binary(),integer(),integer()) -> 'Elixir.Aecore.Tx.DataTx':t()
Invalid type specification for function 'Elixir.Aecore.Oracle.Tx.OracleExtendTx':process_chainstate/7. The success typing is (#{'__struct__':='Elixir.Aecore.Oracle.Tx.OracleExtendTx', _=>_},_,non_neg_integer(),_,_,map(),_) -> {map(),_}
The inferred type for the 6th argument of process_chainstate/7 (map()) is not a supertype of gb_merkle_trees:tree(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The inferred return type of process_chainstate/7 ({map(),_}) has nothing in common with {'error' | gb_merkle_trees:tree(),binary() | map()}, which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
Call to missing or unexported function 'Elixir.Aecore.Account.Account':get_account_state/3
Invalid type specification for function 'Elixir.Aecore.Oracle.Tx.OracleExtendTx':preprocess_check/7. The success typing is (_,_,atom() | #{'balance':=number(), _=>_},number(),_,_,#{'registered_oracles':=_, _=>_}) -> 'ok' | {'error',<<_:64,_:_*8>>}
apps/aecore/lib/aecore/peers/sync.ex:358: The pattern 'error' can never match the type {'error',binary()}
Function trim_peers/1 will never be called
Function check_peer/2 has no local return
Function 'should_a_peer_be_added?'/1 will never be called
The call 'Elixir.Exexec':send(Vospid@1::non_neg_integer(),'eof') breaks the contract (pid() | os_pid(),binary()) -> 'ok'
Guard test '/='(Verror@1::'nil','nil') can never succeed
The pattern {'ok', _account_key@1} can never match the type 'none' | binary() | #{'__struct__':='Elixir.Aecore.Account.Account', 'balance':=non_neg_integer(), 'last_updated':=non_neg_integer(), 'nonce':=non_neg_integer()}
Invalid type specification for function 'Elixir.Aecore.Tx.DataTx':validate_nonce/2. The success typing is (gb_merkle_trees:tree(),atom() | #{'nonce':=_, 'sender':=binary(), _=>_}) -> 'ok' | {'error',<<_:64,_:_*8>>}
Call to missing or unexported function 'Elixir.Aeutil.Parser':'to_string!'/1
The pattern #{'txs':=_@2} can never match the type {'error',binary()} | {'ok',#{'__struct__':='Elixir.Aecore.Chain.Block', 'header':=#{'__struct__':='Elixir.Aecore.Chain.Header', 'height':=non_neg_integer(), 'nonce':=non_neg_integer(), 'pow_evidence':=_, 'prev_hash':=binary(), 'root_hash':=binary(), 'target':=non_neg_integer(), 'time':=non_neg_integer(), 'txs_hash':=binary(), 'version':=non_neg_integer()}, 'txs':=[#{'__struct__':='Elixir.Aecore.Tx.SignedTx', 'data':=#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=_, 'sender':=binary(), 'type':='Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Structures.OracleExtendTx' | 'Elixir.Aecore.Structures.OracleRegistrationTx' | 'Elixir.Aecore.Structures.OracleResponseTx'}, 'signature':=binary()}]}}
The pattern #{'txs':=_@4} can never match the type {'error',binary()} | {'ok',#{'__struct__':='Elixir.Aecore.Chain.Block', 'header':=#{'__struct__':='Elixir.Aecore.Chain.Header', 'height':=non_neg_integer(), 'nonce':=non_neg_integer(), 'pow_evidence':=_, 'prev_hash':=binary(), 'root_hash':=binary(), 'target':=non_neg_integer(), 'time':=non_neg_integer(), 'txs_hash':=binary(), 'version':=non_neg_integer()}, 'txs':=[#{'__struct__':='Elixir.Aecore.Tx.SignedTx', 'data':=#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=_, 'senders':=[binary()], 'type':='Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Structures.OracleExtendTx' | 'Elixir.Aecore.Structures.OracleRegistrationTx' | 'Elixir.Aecore.Structures.OracleResponseTx'}, 'signatures':=[binary()]}]}}
Invalid type specification for function 'Elixir.Aecore.Wallet.Worker':'key_size_valid?'/1. The success typing is (bitstring()) -> 'ok' | {'error',<<_:64,_:_*8>>}
Overloaded contract for 'Elixir.Aecore.Wallet.Worker':has_wallet/2 has overlapping domains; such contracts are currently unsupported and are simply ignored
Function get_info/1 has no local return
Function get_block/1 has no local return
Function get_raw_blocks/1 has no local return
Function get_pool_txs/1 has no local return
Function send_block/2 has no local return
The call 'Elixir.Aeutil.Serialization':block(Vblock@1::any(),'serialize') will never return since it differs in the 2nd argument from the success typing arguments: (map(),'deserialize')
Function get_peers/1 has no local return
Function get_and_add_peers/1 has no local return
Function get_account_balance/1 has no local return
Function get_account_txs/1 has no local return
Function get/1 has no local return
Function get/2 has no local return
Function broadcast_new_block_added_to_chain_and_new_mined_tx/1 has no local return
The call 'Elixir.Aeutil.Serialization':block(Vblock@1::atom() | #{'txs':=_, _=>_},'serialize') will never return since it differs in the 2nd argument from the success typing arguments: (map(),'deserialize')
Function block_by_hash/2 has no local return
The call 'Elixir.Aeutil.Serialization':block(Vblock@1::#{'__struct__':='Elixir.Aecore.Chain.Block', 'header':=#{'__struct__':='Elixir.Aecore.Chain.Header', 'height':=non_neg_integer(), 'nonce':=non_neg_integer(), 'pow_evidence':=_, 'prev_hash':=binary(), 'root_hash':=binary(), 'target':=non_neg_integer(), 'time':=non_neg_integer(), 'txs_hash':=binary(), 'version':=non_neg_integer()}, 'txs':=[#{'__struct__':='Elixir.Aecore.Tx.SignedTx', 'data':=#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=_, 'sender':=binary(), 'type':='Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Structures.OracleExtendTx' | 'Elixir.Aecore.Structures.OracleRegistrationTx' | 'Elixir.Aecore.Structures.OracleResponseTx'}, 'signature':=binary()}]},'serialize') will never return since it differs in the 2nd argument from the success typing arguments: (map(),'deserialize')
The pattern {'error', 'block_not_found'} can never match the type {'error',binary()}
The pattern {'error', 'invalid_hash'} can never match the type {'error',binary()}
The call 'Elixir.Aeutil.Serialization':block(Vblock@1::atom() | #{'header':=_, _=>_},'serialize') will never return since it differs in the 2nd argument from the success typing arguments: (map(),'deserialize')
The call 'Elixir.Aeutil.Serialization':block(Vblock@1::any(),'serialize') will never return since it differs in the 2nd argument from the success typing arguments: (map(),'deserialize')
The pattern {_, Vstate@1} can never match the type 'idle' | 'running'
Function oracle_response/2 has no local return
Function oracle_query/2 has no local return
The call 'Elixir.Aeutil.Serialization':serialize_txs_info_to_json(Vuser_txs@1::[any(),...]) will never return since it differs in the 1st argument from the success typing arguments: ([])
The call 'Elixir.Aeutil.Serialization':serialize_txs_info_to_json(Vuser_txs@1::[any(),...]) will never return since it differs in the 1st argument from the success typing arguments: ([])
Overloaded contract for 'Elixir.Aeutil.PatriciaMerkleTree':new/1 has overlapping domains; such contracts are currently unsupported and are simply ignored
The call 'Elixir.Access':get(Vserialized_block@1::binary(),#{#<116>(8, 1, 'integer', ['unsigned', 'big']), #<120>(8, 1, 'integer', ['unsigned', 'big']), #<115>(8, 1, 'integer', ['unsigned', 'big'])}#,'nil') will never return since the success typing is ('nil' | maybe_improper_list() | map(),any(),any()) -> any() and the contract is (container(),term(),term()) -> term()
    ; (nil_container(),any(),default) -> default
The call 'Elixir.Aecore.Tx.SignedTx':hash_tx(#{'__struct__':='Elixir.Aecore.Tx.SignedTx', 'data':=#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=_, 'sender':=binary(), 'type':='Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Structures.OracleExtendTx' | 'Elixir.Aecore.Structures.OracleRegistrationTx' | 'Elixir.Aecore.Structures.OracleResponseTx'}, 'signature':='nil'}) breaks the contract ('Elixir.Aecore.Tx.SignedTx':t()) -> binary()

The call 'Elixir.Aecore.Tx.DataTx':init('Elixir.Aecore.Account.Tx.CoinbaseTx',Vpayload@1::#{'__struct__':='Elixir.Aecore.Account.Tx.CoinbaseTx', 'amount':=_, 'receiver':=_},[],0,0) breaks the contract (tx_types(),payload(),[binary()] | binary(),non_neg_integer(),integer()) -> 'Elixir.Aecore.Tx.DataTx':t()
The pattern {'ok', Vacc@1} can never match the type 'none' | binary() | #{'__struct__':='Elixir.Aecore.Account.Account', 'balance':=non_neg_integer(), 'last_updated':=non_neg_integer(), 'nonce':=non_neg_integer()}
Invalid type specification for function 'Elixir.Aecore.Account.Tx.CoinbaseTx':create/2. The success typing is (_,_) -> #{'__struct__':='Elixir.Aecore.Account.Tx.CoinbaseTx', 'amount':=_, 'receiver':=_}
The specified type for the 4th argument of preprocess_check/5 (#{'__struct__':='Elixir.Aecore.Account.Tx.CoinbaseTx', 'amount':=non_neg_integer(), 'receiver':=binary()}) is not a supertype of #{'__struct__':='Elixir.Aecore.Account.Tx.SpendTx', 'amount':=non_neg_integer(), 'receiver':=binary(), 'version':=non_neg_integer()}, which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
Invalid type specification for function 'Elixir.Aecore.Chain.Chainstate':apply_transaction_on_state/3. The success typing is (_,_,#{'__struct__':='Elixir.Aecore.Tx.SignedTx', 'data':=#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=_, 'senders':=[binary()], 'type':='Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Structures.OracleExtendTx' | 'Elixir.Aecore.Structures.OracleRegistrationTx' | 'Elixir.Aecore.Structures.OracleResponseTx'}, 'signatures':=[binary()]}) -> {'error',binary()} | {'ok',_}
The call 'Elixir.Aecore.Oracle.Oracle':'tx_ttl_is_valid?'(Vtx@1::#{'__struct__':='Elixir.Aecore.Tx.SignedTx', 'data':=#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=#{'__struct__':='Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Oracle.Tx.OracleExtendTx' | 'Elixir.Aecore.Oracle.Tx.OracleQueryTx' | 'Elixir.Aecore.Oracle.Tx.OracleRegistrationTx' | 'Elixir.Aecore.Oracle.Tx.OracleResponseTx', _=>_}, 'senders':=[binary()], 'type':='Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Structures.OracleExtendTx' | 'Elixir.Aecore.Structures.OracleRegistrationTx' | 'Elixir.Aecore.Structures.OracleResponseTx'}, 'signatures':=[binary()]},Vblock_height@1::pos_integer()) breaks the contract (oracle_txs_with_ttl(),non_neg_integer()) -> boolean()
The return type {gb_merkle_trees:tree(),_} in the specification of process_chainstate/5 is not a subtype of {'error',binary()} | {'ok',{gb_merkle_trees:tree(),map()}}, which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specification for 'Elixir.Aecore.Naming.Tx.NameClaimTx':process_chainstate/5 has an opaque subtype gb_merkle_trees:tree() which is violated by the success typing (_,map(),non_neg_integer(),#{'__struct__':='Elixir.Aecore.Naming.Tx.NameClaimTx', 'name':=binary(), 'name_salt':=binary(), _=>_},#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=_, 'senders':=[binary()], 'type':='Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Structures.OracleExtendTx' | 'Elixir.Aecore.Structures.OracleRegistrationTx' | 'Elixir.Aecore.Structures.OracleResponseTx'}) -> {'ok',{_,map()}}
The specified type for the 4th argument of preprocess_check/5 (#{'__struct__':='Elixir.Aecore.Naming.Tx.NameClaimTx', 'name':=binary(), 'name_salt':=binary()}) is not a supertype of #{'__struct__':='Elixir.Aecore.Account.Tx.SpendTx', 'amount':=non_neg_integer(), 'receiver':=binary(), 'version':=non_neg_integer()}, which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The inferred type for the 4th argument of preprocess_check/5 (atom() | #{'name':=binary(), 'name_salt':=binary(), _=>_}) is not a supertype of #{'__struct__':='Elixir.Aecore.Account.Tx.SpendTx', 'amount':=non_neg_integer(), 'receiver':=binary(), 'version':=non_neg_integer()}, which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The return type {gb_merkle_trees:tree(),_} in the specification of process_chainstate/5 is not a subtype of {'error',binary()} | {'ok',{gb_merkle_trees:tree(),map()}}, which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specification for 'Elixir.Aecore.Naming.Tx.NamePreClaimTx':process_chainstate/5 has an opaque subtype gb_merkle_trees:tree() which is violated by the success typing (_,map(),non_neg_integer(),#{'__struct__':='Elixir.Aecore.Naming.Tx.NamePreClaimTx', 'commitment':=binary(), _=>_},#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=_, 'senders':=[binary()], 'type':='Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Structures.OracleExtendTx' | 'Elixir.Aecore.Structures.OracleRegistrationTx' | 'Elixir.Aecore.Structures.OracleResponseTx'}) -> {'ok',{_,map()}}
The return type {gb_merkle_trees:tree(),_} in the specification of process_chainstate/5 is not a subtype of {'error',binary()} | {'ok',{gb_merkle_trees:tree(),map()}}, which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specification for 'Elixir.Aecore.Naming.Tx.NameRevokeTx':process_chainstate/5 has an opaque subtype gb_merkle_trees:tree() which is violated by the success typing (_,map(),number(),#{'__struct__':='Elixir.Aecore.Naming.Tx.NameRevokeTx', 'hash':=_, _=>_},_) -> {'ok',{_,map()}}
The specified type for the 4th argument of preprocess_check/5 (#{'__struct__':='Elixir.Aecore.Naming.Tx.NameRevokeTx', 'hash':=binary()}) is not a supertype of #{'__struct__':='Elixir.Aecore.Account.Tx.SpendTx', 'amount':=non_neg_integer(), 'receiver':=binary(), 'version':=non_neg_integer()}, which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The inferred type for the 4th argument of preprocess_check/5 (atom() | #{'hash':=_, _=>_}) is not a supertype of #{'__struct__':='Elixir.Aecore.Account.Tx.SpendTx', 'amount':=non_neg_integer(), 'receiver':=binary(), 'version':=non_neg_integer()}, which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The return type {gb_merkle_trees:tree(),_} in the specification of process_chainstate/5 is not a subtype of {'error',binary()} | {'ok',{gb_merkle_trees:tree(),map()}}, which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specification for 'Elixir.Aecore.Naming.Tx.NameTransferTx':process_chainstate/5 has an opaque subtype gb_merkle_trees:tree() which is violated by the success typing (_,map(),_,#{'__struct__':='Elixir.Aecore.Naming.Tx.NameTransferTx', 'hash':=_, 'target':=_, _=>_},_) -> {'ok',{_,map()}}
The specified type for the 4th argument of preprocess_check/5 (#{'__struct__':='Elixir.Aecore.Naming.Tx.NameTransferTx', 'hash':=binary(), 'target':=binary()}) is not a supertype of #{'__struct__':='Elixir.Aecore.Account.Tx.SpendTx', 'amount':=non_neg_integer(), 'receiver':=binary(), 'version':=non_neg_integer()}, which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The inferred type for the 4th argument of preprocess_check/5 (atom() | #{'hash':=_, _=>_}) is not a supertype of #{'__struct__':='Elixir.Aecore.Account.Tx.SpendTx', 'amount':=non_neg_integer(), 'receiver':=binary(), 'version':=non_neg_integer()}, which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The return type {gb_merkle_trees:tree(),_} in the specification of process_chainstate/5 is not a subtype of {'error',binary()} | {'ok',{gb_merkle_trees:tree(),map()}}, which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specification for 'Elixir.Aecore.Naming.Tx.NameUpdateTx':process_chainstate/5 has an opaque subtype gb_merkle_trees:tree() which is violated by the success typing (_,map(),_,#{'__struct__':='Elixir.Aecore.Naming.Tx.NameUpdateTx', 'client_ttl':=_, 'expire_by':=_, 'hash':=_, 'pointers':=_, _=>_},_) -> {'ok',{_,map()}}
The specified type for the 4th argument of preprocess_check/5 (#{'__struct__':='Elixir.Aecore.Naming.Tx.NameUpdateTx', 'client_ttl':=non_neg_integer(), 'expire_by':=non_neg_integer(), 'hash':=binary(), 'pointers':=binary()}) is not a supertype of #{'__struct__':='Elixir.Aecore.Account.Tx.SpendTx', 'amount':=non_neg_integer(), 'receiver':=binary(), 'version':=non_neg_integer()}, which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The inferred type for the 4th argument of preprocess_check/5 (atom() | #{'hash':=_, _=>_}) is not a supertype of #{'__struct__':='Elixir.Aecore.Account.Tx.SpendTx', 'amount':=non_neg_integer(), 'receiver':=binary(), 'version':=non_neg_integer()}, which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The call 'Elixir.Aecore.Tx.DataTx':init('Elixir.Aecore.Oracle.Tx.OracleRegistrationTx',Vpayload@1::#{'query_fee':=_, 'query_format':=_, 'response_format':=_, 'ttl':=_},binary(),Vfee@1::any(),non_neg_integer()) breaks the contract (tx_types(),payload(),[binary()] | binary(),non_neg_integer(),integer()) -> 'Elixir.Aecore.Tx.DataTx':t()
The call 'Elixir.Aecore.Tx.DataTx':init('Elixir.Aecore.Oracle.Tx.OracleQueryTx',Vpayload@1::#{'oracle_address':=_, 'query_data':=_, 'query_fee':=_, 'query_ttl':=_, 'response_ttl':=_},binary(),Vfee@1::any(),non_neg_integer()) breaks the contract (tx_types(),payload(),[binary()] | binary(),non_neg_integer(),integer()) -> 'Elixir.Aecore.Tx.DataTx':t()
The call 'Elixir.Aecore.Tx.DataTx':init('Elixir.Aecore.Oracle.Tx.OracleResponseTx',Vpayload@1::#{'query_id':=_, 'response':=_},binary(),Vfee@1::any(),non_neg_integer()) breaks the contract (tx_types(),payload(),[binary()] | binary(),non_neg_integer(),integer()) -> 'Elixir.Aecore.Tx.DataTx':t()
The call 'Elixir.Aecore.Tx.DataTx':init('Elixir.Aecore.Oracle.Tx.OracleExtendTx',Vpayload@1::#{'ttl':=_},binary(),Vfee@1::any(),non_neg_integer()) breaks the contract (tx_types(),payload(),[binary()] | binary(),non_neg_integer(),integer()) -> 'Elixir.Aecore.Tx.DataTx':t()
The return type boolean() in the specification of validate/2 is not a subtype of 'ok' | {'error',binary()}, which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The return type {_,_} in the specification of process_chainstate/5 is not a subtype of {'error',binary()} | {'ok',{gb_merkle_trees:tree(),map()}}, which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specified type for the 4th argument of preprocess_check/5 (#{'__struct__':='Elixir.Aecore.Oracle.Tx.OracleExtendTx', 'ttl':=non_neg_integer()}) is not a supertype of #{'__struct__':='Elixir.Aecore.Account.Tx.SpendTx', 'amount':=non_neg_integer(), 'receiver':=binary(), 'version':=non_neg_integer()}, which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The return type {_,_} in the specification of process_chainstate/5 is not a subtype of {'error',binary()} | {'ok',{gb_merkle_trees:tree(),map()}}, which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specified type for the 4th argument of preprocess_check/5 (#{'__struct__':='Elixir.Aecore.Oracle.Tx.OracleQueryTx', 'oracle_address':=binary(), 'query_data':=_, 'query_fee':=non_neg_integer(), 'query_ttl':=#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'response_ttl':=#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}}) is not a supertype of #{'__struct__':='Elixir.Aecore.Account.Tx.SpendTx', 'amount':=non_neg_integer(), 'receiver':=binary(), 'version':=non_neg_integer()}, which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The inferred type for the 4th argument of preprocess_check/5 (atom() | #{'query_fee':=number(), _=>_}) is not a supertype of #{'__struct__':='Elixir.Aecore.Account.Tx.SpendTx', 'amount':=non_neg_integer(), 'receiver':=binary(), 'version':=non_neg_integer()}, which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The return type {'ok',{_,_}} in the specification of process_chainstate/5 is not a subtype of {'error',binary()} | {'ok',{gb_merkle_trees:tree(),map()}}, which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specified type for the 4th argument of preprocess_check/5 (#{'__struct__':='Elixir.Aecore.Oracle.Tx.OracleRegistrationTx', 'query_fee':=non_neg_integer(), 'query_format':=map(), 'response_format':=map(), 'ttl':=#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}}) is not a supertype of #{'__struct__':='Elixir.Aecore.Account.Tx.SpendTx', 'amount':=non_neg_integer(), 'receiver':=binary(), 'version':=non_neg_integer()}, which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The return type {'ok',{_,_}} in the specification of process_chainstate/5 is not a subtype of {'error',binary()} | {'ok',{gb_merkle_trees:tree(),map()}}, which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specified type for the 4th argument of preprocess_check/5 (#{'__struct__':='Elixir.Aecore.Oracle.Tx.OracleResponseTx', 'query_id':=binary(), 'response':=map()}) is not a supertype of #{'__struct__':='Elixir.Aecore.Account.Tx.SpendTx', 'amount':=non_neg_integer(), 'receiver':=binary(), 'version':=non_neg_integer()}, which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
Invalid type specification for function 'Elixir.Aecore.Tx.DataTx':serialize/1. The success typing is (#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=atom() | binary() | [any()] | map(), 'nonce':=atom() | binary() | [any()] | map(), 'payload':=atom() | binary() | [any()] | map(), 'senders':=[any()], 'type':=atom() | binary() | [any()] | map(), _=>_}) -> #{<<_:24,_:_*8>>=>binary() | [any()]}
The specification for 'Elixir.Aecore.Tx.DataTx':standard_deduct_fee/4 has an opaque subtype gb_merkle_trees:tree() which is violated by the success typing (gb_merkle_trees:tree(),_,#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=_, 'senders':=[binary()], 'type':='Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Structures.OracleExtendTx' | 'Elixir.Aecore.Structures.OracleRegistrationTx' | 'Elixir.Aecore.Structures.OracleResponseTx'},_) -> gb_merkle_trees:tree()
The call 'Elixir.Aehttpserver.Web.Notify':broadcast_new_transaction_in_the_pool(Vtx@1::#{'__struct__':='Elixir.Aecore.Tx.SignedTx', 'data':=#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=#{'__struct__':='Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Oracle.Tx.OracleExtendTx' | 'Elixir.Aecore.Oracle.Tx.OracleQueryTx' | 'Elixir.Aecore.Oracle.Tx.OracleRegistrationTx' | 'Elixir.Aecore.Oracle.Tx.OracleResponseTx', _=>_}, 'senders':=[binary()], 'type':='Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Structures.OracleExtendTx' | 'Elixir.Aecore.Structures.OracleRegistrationTx' | 'Elixir.Aecore.Structures.OracleResponseTx'}, 'signatures':=[binary()]}) will never return since it differs in the 1st argument from the success typing arguments: (#{'__struct__':='Elixir.Aecore.Tx.SignedTx', 'data':=#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=atom() | binary() | [any()] | map(), 'nonce':=atom() | binary() | [any()] | map(), 'payload':=atom() | binary() | [any()] | map(), 'senders':=[any()], 'type':=atom() | binary() | [any()] | map(), _=>_}, 'signatures':=[any()], _=>_})
The pattern #{'txs':=_@2} can never match the type {'error',binary()} | {'ok',#{'__struct__':='Elixir.Aecore.Chain.Block', 'header':=#{'__struct__':='Elixir.Aecore.Chain.Header', 'height':=non_neg_integer(), 'nonce':=non_neg_integer(), 'pow_evidence':=_, 'prev_hash':=binary(), 'root_hash':=binary(), 'target':=non_neg_integer(), 'time':=non_neg_integer(), 'txs_hash':=binary(), 'version':=non_neg_integer()}, 'txs':=[#{'__struct__':='Elixir.Aecore.Tx.SignedTx', 'data':=#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=_, 'senders':=[binary()], 'type':='Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Structures.OracleExtendTx' | 'Elixir.Aecore.Structures.OracleRegistrationTx' | 'Elixir.Aecore.Structures.OracleResponseTx'}, 'signatures':=[binary()]}]}}
Invalid type specification for function 'Elixir.Aecore.Tx.SignedTx':serialize/1. The success typing is (#{'__struct__':='Elixir.Aecore.Tx.SignedTx', 'data':=#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=atom() | binary() | [any()] | map(), 'nonce':=atom() | binary() | [any()] | map(), 'payload':=atom() | binary() | [any()] | map(), 'senders':=[any()], 'type':=atom() | binary() | [any()] | map(), _=>_}, 'signatures':=[any()], _=>_}) -> #{<<_:32,_:_*40>>=>binary() | [any()] | map()}
Invalid type specification for function 'Elixir.Aecore.Tx.SignedTx':deserialize/1. The success typing is ('nil' | binary() | [any()] | map()) -> #{'__struct__':='Elixir.Aecore.Tx.SignedTx', 'data':=#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=_, 'senders':=[binary()], 'type':='Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Structures.OracleExtendTx' | 'Elixir.Aecore.Structures.OracleRegistrationTx' | 'Elixir.Aecore.Structures.OracleResponseTx'}, 'signatures':=[binary()]}
Function send_tx/2 has no local return
The call 'Elixir.Aehttpclient.Client':post_to_peers(#{#<116>(8, 1, 'integer', ['unsigned', 'big']), #<120>(8, 1, 'integer', ['unsigned', 'big'])}#,Vdata@1::#{<<_:32,_:_*40>>=>binary() | [any()] | map()},Vpeers@1::any()) breaks the contract ('Elixir.String':t(),'Elixir.Aecore.Tx.SignedTx':t(),['Elixir.String':t()]) -> 'ok'
Invalid type specification for function 'Elixir.Aehttpclient.Client':post_to_peers/3. The success typing is (<<_:16>>,#{<<_:32,_:_*40>>=>binary() | [any()] | map()},_) -> 'ok'
The call 'Elixir.Aeutil.Serialization':block(Vblock@1::#{'__struct__':='Elixir.Aecore.Chain.Block', 'header':=#{'__struct__':='Elixir.Aecore.Chain.Header', 'height':=non_neg_integer(), 'nonce':=non_neg_integer(), 'pow_evidence':=_, 'prev_hash':=binary(), 'root_hash':=binary(), 'target':=non_neg_integer(), 'time':=non_neg_integer(), 'txs_hash':=binary(), 'version':=non_neg_integer()}, 'txs':=[#{'__struct__':='Elixir.Aecore.Tx.SignedTx', 'data':=#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=_, 'senders':=[binary()], 'type':='Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Structures.OracleExtendTx' | 'Elixir.Aecore.Structures.OracleRegistrationTx' | 'Elixir.Aecore.Structures.OracleResponseTx'}, 'signatures':=[binary()]}]},'serialize') will never return since it differs in the 2nd argument from the success typing arguments: (map(),'deserialize')
The call maps:put('proof',Vproof@1::[any()],[map()]) will never return since it differs in the 3rd argument from the success typing arguments: (any(),any(),map())
The call maps:put(#{#<116>(8, 1, 'integer', ['unsigned', 'big']), #<114>(8, 1, 'integer', ['unsigned', 'big']), #<97>(8, 1, 'integer', ['unsigned', 'big']), #<110>(8, 1, 'integer', ['unsigned', 'big']), #<115>(8, 1, 'integer', ['unsigned', 'big']), #<97>(8, 1, 'integer', ['unsigned', 'big']), #<99>(8, 1, 'integer', ['unsigned', 'big']), #<116>(8, 1, 'integer', ['unsigned', 'big']), #<105>(8, 1, 'integer', ['unsigned', 'big']), #<111>(8, 1, 'integer', ['unsigned', 'big']), #<110>(8, 1, 'integer', ['unsigned', 'big']), #<115>(8, 1, 'integer', ['unsigned', 'big'])}#,Vserialized_txs@1::[any()],Vserialized_header@1::binary()) will never return since it differs in the 3rd argument from the success typing arguments: (any(),any(),map())
apps/aecore/lib/aecore/oracle/tx/oracle_extend_tx.ex:35: Invalid type specification for function 'Elixir.Aecore.Oracle.Tx.OracleExtendTx':validate/2. The success typing is (#{'__struct__':='Elixir.Aecore.Oracle.Tx.OracleExtendTx', 'ttl':=_, _=>_},#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=_, 'senders':=[binary()], 'type':='Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Structures.OracleExtendTx' | 'Elixir.Aecore.Structures.OracleRegistrationTx' | 'Elixir.Aecore.Structures.OracleResponseTx'}) -> 'ok' | {'error',<<_:64,_:_*8>>}
:0: Unknown function 'Elixir.DataTx':rlp_decode/1
:0: Unknown function 'Elixir.ExRLP':decode/1
:0: Unknown function 'Elixir.ExRLP':encode/1
apps/aecore/lib/aecore/account/account.ex:91: Function spend/4 has no local return
apps/aecore/lib/aecore/account/account.ex:117: Function spend/7 has no local return
apps/aecore/lib/aecore/account/account.ex:125: The call 'Elixir.Aecore.Account.Account':build_tx(Vpayload@1::#{'amount':=_, 'payload':=_, 'receiver':=_, 'version':=_},'Elixir.Aecore.Account.Tx.SpendTx',Vsender@1::any(),Vsender_priv_key@1::any(),Vfee@1::any(),Vnonce@1::any()) will never return since the success typing is (#{'__struct__':='Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Oracle.Tx.OracleExtendTx' | 'Elixir.Aecore.Oracle.Tx.OracleQueryTx' | 'Elixir.Aecore.Oracle.Tx.OracleRegistrationTx' | 'Elixir.Aecore.Oracle.Tx.OracleResponseTx', 'amount'=>non_neg_integer(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'name'=>binary(), 'name_salt'=>binary(), 'oracle_address'=>binary(), 'payload'=>binary(), 'pointers'=>binary(), 'query_data'=>_, 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'query_ttl'=>#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'receiver'=>binary(), 'response'=>map(), 'response_format'=>map(), 'response_ttl'=>#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'target'=>binary(), 'ttl'=>non_neg_integer() | #{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'version'=>non_neg_integer()},'Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Oracle.Tx.OracleExtendTx' | 'Elixir.Aecore.Oracle.Tx.OracleRegistrationTx' | 'Elixir.Aecore.Oracle.Tx.OracleResponseTx',binary(),binary(),non_neg_integer(),integer()) -> {'error',<<_:64,_:_*8>>} | {'ok',#{'__struct__':='Elixir.Aecore.Tx.SignedTx', 'data':=#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=map(), 'senders':=[any()], 'type':='Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Oracle.Tx.OracleExtendTx' | 'Elixir.Aecore.Oracle.Tx.OracleRegistrationTx' | 'Elixir.Aecore.Oracle.Tx.OracleResponseTx'}, 'signatures':=[binary()]}} and the contract is ('Elixir.Aecore.Tx.DataTx':payload(),'Elixir.Aecore.Tx.DataTx':tx_types(),binary(),binary(),non_neg_integer(),non_neg_integer()) -> {'ok','Elixir.Aecore.Tx.SignedTx':t()} | {'error','Elixir.String':t()}
apps/aecore/lib/aecore/account/account.ex:131: Invalid type specification for function 'Elixir.Aecore.Account.Account':pre_claim/3. The success typing is (binary(),binary(),_) -> {'error',<<_:64,_:_*8>>}
apps/aecore/lib/aecore/account/account.ex:142: Invalid type specification for function 'Elixir.Aecore.Account.Account':pre_claim/6. The success typing is (_,_,binary(),binary(),_,_) -> {'error',<<_:64,_:_*8>>}
apps/aecore/lib/aecore/account/account.ex:154: The call 'Elixir.Aecore.Account.Account':build_tx(Vpayload@1::#{'commitment':=binary()},'Elixir.Aecore.Naming.Tx.NamePreClaimTx',Vsender@1::any(),Vsender_priv_key@1::any(),Vfee@1::any(),Vnonce@1::any()) will never return since the success typing is (#{'__struct__':='Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Oracle.Tx.OracleExtendTx' | 'Elixir.Aecore.Oracle.Tx.OracleQueryTx' | 'Elixir.Aecore.Oracle.Tx.OracleRegistrationTx' | 'Elixir.Aecore.Oracle.Tx.OracleResponseTx', 'amount'=>non_neg_integer(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'name'=>binary(), 'name_salt'=>binary(), 'oracle_address'=>binary(), 'payload'=>binary(), 'pointers'=>binary(), 'query_data'=>_, 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'query_ttl'=>#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'receiver'=>binary(), 'response'=>map(), 'response_format'=>map(), 'response_ttl'=>#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'target'=>binary(), 'ttl'=>non_neg_integer() | #{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'version'=>non_neg_integer()},'Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Oracle.Tx.OracleExtendTx' | 'Elixir.Aecore.Oracle.Tx.OracleRegistrationTx' | 'Elixir.Aecore.Oracle.Tx.OracleResponseTx',binary(),binary(),non_neg_integer(),integer()) -> {'error',<<_:64,_:_*8>>} | {'ok',#{'__struct__':='Elixir.Aecore.Tx.SignedTx', 'data':=#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=map(), 'senders':=[any()], 'type':='Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Oracle.Tx.OracleExtendTx' | 'Elixir.Aecore.Oracle.Tx.OracleRegistrationTx' | 'Elixir.Aecore.Oracle.Tx.OracleResponseTx'}, 'signatures':=[binary()]}} and the contract is ('Elixir.Aecore.Tx.DataTx':payload(),'Elixir.Aecore.Tx.DataTx':tx_types(),binary(),binary(),non_neg_integer(),non_neg_integer()) -> {'ok','Elixir.Aecore.Tx.SignedTx':t()} | {'error','Elixir.String':t()}
apps/aecore/lib/aecore/account/account.ex:164: Invalid type specification for function 'Elixir.Aecore.Account.Account':claim/3. The success typing is (binary(),_,_) -> {'error',<<_:64,_:_*8>>}
apps/aecore/lib/aecore/account/account.ex:175: Invalid type specification for function 'Elixir.Aecore.Account.Account':claim/6. The success typing is (_,_,binary(),_,_,_) -> {'error',<<_:64,_:_*8>>}
apps/aecore/lib/aecore/account/account.ex:187: The call 'Elixir.Aecore.Account.Account':build_tx(Vpayload@1::#{'name':=binary(), 'name_salt':=_},'Elixir.Aecore.Naming.Tx.NameClaimTx',Vsender@1::any(),Vsender_priv_key@1::any(),Vfee@1::any(),Vnonce@1::any()) will never return since the success typing is (#{'__struct__':='Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Oracle.Tx.OracleExtendTx' | 'Elixir.Aecore.Oracle.Tx.OracleQueryTx' | 'Elixir.Aecore.Oracle.Tx.OracleRegistrationTx' | 'Elixir.Aecore.Oracle.Tx.OracleResponseTx', 'amount'=>non_neg_integer(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'name'=>binary(), 'name_salt'=>binary(), 'oracle_address'=>binary(), 'payload'=>binary(), 'pointers'=>binary(), 'query_data'=>_, 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'query_ttl'=>#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'receiver'=>binary(), 'response'=>map(), 'response_format'=>map(), 'response_ttl'=>#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'target'=>binary(), 'ttl'=>non_neg_integer() | #{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'version'=>non_neg_integer()},'Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Oracle.Tx.OracleExtendTx' | 'Elixir.Aecore.Oracle.Tx.OracleRegistrationTx' | 'Elixir.Aecore.Oracle.Tx.OracleResponseTx',binary(),binary(),non_neg_integer(),integer()) -> {'error',<<_:64,_:_*8>>} | {'ok',#{'__struct__':='Elixir.Aecore.Tx.SignedTx', 'data':=#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=map(), 'senders':=[any()], 'type':='Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Oracle.Tx.OracleExtendTx' | 'Elixir.Aecore.Oracle.Tx.OracleRegistrationTx' | 'Elixir.Aecore.Oracle.Tx.OracleResponseTx'}, 'signatures':=[binary()]}} and the contract is ('Elixir.Aecore.Tx.DataTx':payload(),'Elixir.Aecore.Tx.DataTx':tx_types(),binary(),binary(),non_neg_integer(),non_neg_integer()) -> {'ok','Elixir.Aecore.Tx.SignedTx':t()} | {'error','Elixir.String':t()}
apps/aecore/lib/aecore/account/account.ex:197: Invalid type specification for function 'Elixir.Aecore.Account.Account':name_update/3. The success typing is (binary(),_,_) -> {'error',<<_:64,_:_*8>>}
apps/aecore/lib/aecore/account/account.ex:208: Invalid type specification for function 'Elixir.Aecore.Account.Account':name_update/6. The success typing is (_,_,binary(),_,_,_) -> {'error',<<_:64,_:_*8>>}
apps/aecore/lib/aecore/account/account.ex:226: The call 'Elixir.Aecore.Account.Account':build_tx(Vpayload@1::#{'client_ttl':=86400, 'expire_by':=pos_integer(), 'hash':=binary(), 'pointers':=_},'Elixir.Aecore.Naming.Tx.NameUpdateTx',Vsender@1::any(),Vsender_priv_key@1::any(),Vfee@1::any(),Vnonce@1::any()) will never return since the success typing is (#{'__struct__':='Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Oracle.Tx.OracleExtendTx' | 'Elixir.Aecore.Oracle.Tx.OracleQueryTx' | 'Elixir.Aecore.Oracle.Tx.OracleRegistrationTx' | 'Elixir.Aecore.Oracle.Tx.OracleResponseTx', 'amount'=>non_neg_integer(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'name'=>binary(), 'name_salt'=>binary(), 'oracle_address'=>binary(), 'payload'=>binary(), 'pointers'=>binary(), 'query_data'=>_, 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'query_ttl'=>#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'receiver'=>binary(), 'response'=>map(), 'response_format'=>map(), 'response_ttl'=>#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'target'=>binary(), 'ttl'=>non_neg_integer() | #{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'version'=>non_neg_integer()},'Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Oracle.Tx.OracleExtendTx' | 'Elixir.Aecore.Oracle.Tx.OracleRegistrationTx' | 'Elixir.Aecore.Oracle.Tx.OracleResponseTx',binary(),binary(),non_neg_integer(),integer()) -> {'error',<<_:64,_:_*8>>} | {'ok',#{'__struct__':='Elixir.Aecore.Tx.SignedTx', 'data':=#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=map(), 'senders':=[any()], 'type':='Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Oracle.Tx.OracleExtendTx' | 'Elixir.Aecore.Oracle.Tx.OracleRegistrationTx' | 'Elixir.Aecore.Oracle.Tx.OracleResponseTx'}, 'signatures':=[binary()]}} and the contract is ('Elixir.Aecore.Tx.DataTx':payload(),'Elixir.Aecore.Tx.DataTx':tx_types(),binary(),binary(),non_neg_integer(),non_neg_integer()) -> {'ok','Elixir.Aecore.Tx.SignedTx':t()} | {'error','Elixir.String':t()}
apps/aecore/lib/aecore/account/account.ex:236: Invalid type specification for function 'Elixir.Aecore.Account.Account':name_transfer/3. The success typing is (binary(),_,_) -> {'error',<<_:64,_:_*8>>}
apps/aecore/lib/aecore/account/account.ex:247: Invalid type specification for function 'Elixir.Aecore.Account.Account':name_transfer/6. The success typing is (_,_,binary(),_,_,_) -> {'error',<<_:64,_:_*8>>}
apps/aecore/lib/aecore/account/account.ex:259: The call 'Elixir.Aecore.Account.Account':build_tx(Vpayload@1::#{'hash':=binary(), 'target':=_},'Elixir.Aecore.Naming.Tx.NameTransferTx',Vsender@1::any(),Vsender_priv_key@1::any(),Vfee@1::any(),Vnonce@1::any()) will never return since the success typing is (#{'__struct__':='Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Oracle.Tx.OracleExtendTx' | 'Elixir.Aecore.Oracle.Tx.OracleQueryTx' | 'Elixir.Aecore.Oracle.Tx.OracleRegistrationTx' | 'Elixir.Aecore.Oracle.Tx.OracleResponseTx', 'amount'=>non_neg_integer(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'name'=>binary(), 'name_salt'=>binary(), 'oracle_address'=>binary(), 'payload'=>binary(), 'pointers'=>binary(), 'query_data'=>_, 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'query_ttl'=>#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'receiver'=>binary(), 'response'=>map(), 'response_format'=>map(), 'response_ttl'=>#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'target'=>binary(), 'ttl'=>non_neg_integer() | #{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'version'=>non_neg_integer()},'Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Oracle.Tx.OracleExtendTx' | 'Elixir.Aecore.Oracle.Tx.OracleRegistrationTx' | 'Elixir.Aecore.Oracle.Tx.OracleResponseTx',binary(),binary(),non_neg_integer(),integer()) -> {'error',<<_:64,_:_*8>>} | {'ok',#{'__struct__':='Elixir.Aecore.Tx.SignedTx', 'data':=#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=map(), 'senders':=[any()], 'type':='Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Oracle.Tx.OracleExtendTx' | 'Elixir.Aecore.Oracle.Tx.OracleRegistrationTx' | 'Elixir.Aecore.Oracle.Tx.OracleResponseTx'}, 'signatures':=[binary()]}} and the contract is ('Elixir.Aecore.Tx.DataTx':payload(),'Elixir.Aecore.Tx.DataTx':tx_types(),binary(),binary(),non_neg_integer(),non_neg_integer()) -> {'ok','Elixir.Aecore.Tx.SignedTx':t()} | {'error','Elixir.String':t()}
apps/aecore/lib/aecore/account/account.ex:269: Invalid type specification for function 'Elixir.Aecore.Account.Account':name_revoke/2. The success typing is (binary(),_) -> {'error',<<_:64,_:_*8>>}
apps/aecore/lib/aecore/account/account.ex:280: Invalid type specification for function 'Elixir.Aecore.Account.Account':name_revoke/5. The success typing is (_,_,binary(),_,_) -> {'error',<<_:64,_:_*8>>}
apps/aecore/lib/aecore/account/account.ex:291: The call 'Elixir.Aecore.Account.Account':build_tx(Vpayload@1::#{'hash':=binary()},'Elixir.Aecore.Naming.Tx.NameRevokeTx',Vsender@1::any(),Vsender_priv_key@1::any(),Vfee@1::any(),Vnonce@1::any()) will never return since the success typing is (#{'__struct__':='Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Oracle.Tx.OracleExtendTx' | 'Elixir.Aecore.Oracle.Tx.OracleQueryTx' | 'Elixir.Aecore.Oracle.Tx.OracleRegistrationTx' | 'Elixir.Aecore.Oracle.Tx.OracleResponseTx', 'amount'=>non_neg_integer(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'name'=>binary(), 'name_salt'=>binary(), 'oracle_address'=>binary(), 'payload'=>binary(), 'pointers'=>binary(), 'query_data'=>_, 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'query_ttl'=>#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'receiver'=>binary(), 'response'=>map(), 'response_format'=>map(), 'response_ttl'=>#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'target'=>binary(), 'ttl'=>non_neg_integer() | #{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'version'=>non_neg_integer()},'Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Oracle.Tx.OracleExtendTx' | 'Elixir.Aecore.Oracle.Tx.OracleRegistrationTx' | 'Elixir.Aecore.Oracle.Tx.OracleResponseTx',binary(),binary(),non_neg_integer(),integer()) -> {'error',<<_:64,_:_*8>>} | {'ok',#{'__struct__':='Elixir.Aecore.Tx.SignedTx', 'data':=#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=map(), 'senders':=[any()], 'type':='Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Oracle.Tx.OracleExtendTx' | 'Elixir.Aecore.Oracle.Tx.OracleRegistrationTx' | 'Elixir.Aecore.Oracle.Tx.OracleResponseTx'}, 'signatures':=[binary()]}} and the contract is ('Elixir.Aecore.Tx.DataTx':payload(),'Elixir.Aecore.Tx.DataTx':tx_types(),binary(),binary(),non_neg_integer(),non_neg_integer()) -> {'ok','Elixir.Aecore.Tx.SignedTx':t()} | {'error','Elixir.String':t()}
apps/aecore/lib/aecore/account/account.ex:400: The variable _ can never match since previous clauses completely covered the type 'Elixir.Aecore.Account.Account'
apps/aecore/lib/aecore/account/tx/coinbase_tx.ex:116: The specified type for the 4th argument of preprocess_check/5 (#{'__struct__':='Elixir.Aecore.Account.Tx.CoinbaseTx', 'amount':=non_neg_integer(), 'receiver':=binary()}) is not a supertype of #{'__struct__':='Elixir.Aecore.Account.Tx.SpendTx', 'amount':=non_neg_integer(), 'payload':=binary(), 'receiver':=binary(), 'version':=non_neg_integer()}, which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
apps/aecore/lib/aecore/chain/block.ex:77: The variable _ can never match since previous clauses completely covered the type 'Elixir.Aecore.Chain.Block'
apps/aecore/lib/aecore/chain/chainstate.ex:66: Invalid type specification for function 'Elixir.Aecore.Chain.Chainstate':apply_transaction_on_state/3. The success typing is (_,_,#{'__struct__':='Elixir.Aecore.Tx.SignedTx', 'data':=#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=#{'__struct__':='Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Oracle.Tx.OracleExtendTx' | 'Elixir.Aecore.Oracle.Tx.OracleQueryTx' | 'Elixir.Aecore.Oracle.Tx.OracleRegistrationTx' | 'Elixir.Aecore.Oracle.Tx.OracleResponseTx', 'amount'=>non_neg_integer(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'name'=>binary(), 'name_salt'=>binary(), 'oracle_address'=>binary(), 'payload'=>binary(), 'pointers'=>binary(), 'query_data'=>_, 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'query_ttl'=>map(), 'receiver'=>binary(), 'response'=>map(), 'response_format'=>map(), 'response_ttl'=>map(), 'target'=>binary(), 'ttl'=>non_neg_integer() | map(), 'version'=>non_neg_integer()}, 'senders':=[binary()], 'type':='Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Oracle.Tx.OracleExtendTx' | 'Elixir.Aecore.Oracle.Tx.OracleRegistrationTx' | 'Elixir.Aecore.Oracle.Tx.OracleResponseTx'}, 'signatures':=[binary()]}) -> {'error',binary()} | {'ok',_}
apps/aecore/lib/aecore/chain/chainstate.ex:129: The pattern 'none' can never match the type #{'__struct__':='Elixir.Aecore.Account.Account', 'balance':=_, 'last_updated':=_, 'nonce':=_, 'pubkey':=_}
apps/aecore/lib/aecore/chain/chainstate.ex:148: Invalid type specification for function 'Elixir.Aecore.Chain.Chainstate':rlp_decode/1. The success typing is (_) -> {'error',<<_:232,_:_*80>>} | {'ok',#{'__struct__':='Elixir.Aecore.Account.Account', 'balance':=_, 'last_updated':=_, 'nonce':=_, 'pubkey':=_}}
apps/aecore/lib/aecore/chain/header.ex:105: The variable _ can never match since previous clauses completely covered the type 'Elixir.Aecore.Chain.Block'
apps/aecore/lib/aecore/miner/worker.ex:282: The call 'Elixir.Aecore.Oracle.Oracle':'tx_ttl_is_valid?'(Vtx@1::#{'__struct__':='Elixir.Aecore.Tx.SignedTx', 'data':=#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=#{'__struct__':='Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Oracle.Tx.OracleExtendTx' | 'Elixir.Aecore.Oracle.Tx.OracleQueryTx' | 'Elixir.Aecore.Oracle.Tx.OracleRegistrationTx' | 'Elixir.Aecore.Oracle.Tx.OracleResponseTx', 'amount'=>non_neg_integer(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'name'=>binary(), 'name_salt'=>binary(), 'oracle_address'=>binary(), 'payload'=>binary(), 'pointers'=>binary(), 'query_data'=>_, 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'query_ttl'=>#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'receiver'=>binary(), 'response'=>map(), 'response_format'=>map(), 'response_ttl'=>#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'target'=>binary(), 'ttl'=>non_neg_integer() | #{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'version'=>non_neg_integer()}, 'senders':=[binary()], 'type':='Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Oracle.Tx.OracleExtendTx' | 'Elixir.Aecore.Oracle.Tx.OracleRegistrationTx' | 'Elixir.Aecore.Oracle.Tx.OracleResponseTx'}, 'signatures':=[binary()]},Vblock_height@1::pos_integer()) breaks the contract (oracle_txs_with_ttl(),non_neg_integer()) -> boolean()
apps/aecore/lib/aecore/naming/naming.ex:219: The variable _ can never match since previous clauses completely covered the type 'Elixir.Name' | 'Elixir.NameCommitment'
apps/aecore/lib/aecore/naming/tx/name_claim_tx.ex:80: The specification for 'Elixir.Aecore.Naming.Tx.NameClaimTx':process_chainstate/5 has an opaque subtype gb_merkle_trees:tree() which is violated by the success typing (_,map(),non_neg_integer(),#{'__struct__':='Elixir.Aecore.Naming.Tx.NameClaimTx', 'name':=binary(), 'name_salt':=binary(), _=>_},#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=#{'__struct__':='Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Oracle.Tx.OracleExtendTx' | 'Elixir.Aecore.Oracle.Tx.OracleQueryTx' | 'Elixir.Aecore.Oracle.Tx.OracleRegistrationTx' | 'Elixir.Aecore.Oracle.Tx.OracleResponseTx', 'amount'=>non_neg_integer(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'name'=>binary(), 'name_salt'=>binary(), 'oracle_address'=>binary(), 'payload'=>binary(), 'pointers'=>binary(), 'query_data'=>_, 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'query_ttl'=>#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'receiver'=>binary(), 'response'=>map(), 'response_format'=>map(), 'response_ttl'=>#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'target'=>binary(), 'ttl'=>non_neg_integer() | #{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'version'=>non_neg_integer()}, 'senders':=[binary()], 'type':='Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Oracle.Tx.OracleExtendTx' | 'Elixir.Aecore.Oracle.Tx.OracleRegistrationTx' | 'Elixir.Aecore.Oracle.Tx.OracleResponseTx'}) -> {'ok',{_,map()}}
apps/aecore/lib/aecore/naming/tx/name_claim_tx.ex:112: The specified type for the 4th argument of preprocess_check/5 (#{'__struct__':='Elixir.Aecore.Naming.Tx.NameClaimTx', 'name':=binary(), 'name_salt':=binary()}) is not a supertype of #{'__struct__':='Elixir.Aecore.Account.Tx.SpendTx', 'amount':=non_neg_integer(), 'payload':=binary(), 'receiver':=binary(), 'version':=non_neg_integer()}, which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
apps/aecore/lib/aecore/naming/tx/name_claim_tx.ex:119: The inferred type for the 4th argument of preprocess_check/5 (atom() | #{'name':=binary(), 'name_salt':=binary(), _=>_}) is not a supertype of #{'__struct__':='Elixir.Aecore.Account.Tx.SpendTx', 'amount':=non_neg_integer(), 'payload':=binary(), 'receiver':=binary(), 'version':=non_neg_integer()}, which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
apps/aecore/lib/aecore/naming/tx/name_pre_claim_tx.ex:75: The specification for 'Elixir.Aecore.Naming.Tx.NamePreClaimTx':process_chainstate/5 has an opaque subtype gb_merkle_trees:tree() which is violated by the success typing (_,map(),non_neg_integer(),#{'__struct__':='Elixir.Aecore.Naming.Tx.NamePreClaimTx', 'commitment':=binary(), _=>_},#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=#{'__struct__':='Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Oracle.Tx.OracleExtendTx' | 'Elixir.Aecore.Oracle.Tx.OracleQueryTx' | 'Elixir.Aecore.Oracle.Tx.OracleRegistrationTx' | 'Elixir.Aecore.Oracle.Tx.OracleResponseTx', 'amount'=>non_neg_integer(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'name'=>binary(), 'name_salt'=>binary(), 'oracle_address'=>binary(), 'payload'=>binary(), 'pointers'=>binary(), 'query_data'=>_, 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'query_ttl'=>#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'receiver'=>binary(), 'response'=>map(), 'response_format'=>map(), 'response_ttl'=>#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'target'=>binary(), 'ttl'=>non_neg_integer() | #{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'version'=>non_neg_integer()}, 'senders':=[binary()], 'type':='Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Oracle.Tx.OracleExtendTx' | 'Elixir.Aecore.Oracle.Tx.OracleRegistrationTx' | 'Elixir.Aecore.Oracle.Tx.OracleResponseTx'}) -> {'ok',{_,map()}}
apps/aecore/lib/aecore/naming/tx/name_revoke_tx.ex:103: The specified type for the 4th argument of preprocess_check/5 (#{'__struct__':='Elixir.Aecore.Naming.Tx.NameRevokeTx', 'hash':=binary()}) is not a supertype of #{'__struct__':='Elixir.Aecore.Account.Tx.SpendTx', 'amount':=non_neg_integer(), 'payload':=binary(), 'receiver':=binary(), 'version':=non_neg_integer()}, which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
apps/aecore/lib/aecore/naming/tx/name_revoke_tx.ex:110: The inferred type for the 4th argument of preprocess_check/5 (atom() | #{'hash':=_, _=>_}) is not a supertype of #{'__struct__':='Elixir.Aecore.Account.Tx.SpendTx', 'amount':=non_neg_integer(), 'payload':=binary(), 'receiver':=binary(), 'version':=non_neg_integer()}, which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
apps/aecore/lib/aecore/naming/tx/name_transfer_tx.ex:104: The specified type for the 4th argument of preprocess_check/5 (#{'__struct__':='Elixir.Aecore.Naming.Tx.NameTransferTx', 'hash':=binary(), 'target':=binary()}) is not a supertype of #{'__struct__':='Elixir.Aecore.Account.Tx.SpendTx', 'amount':=non_neg_integer(), 'payload':=binary(), 'receiver':=binary(), 'version':=non_neg_integer()}, which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
apps/aecore/lib/aecore/naming/tx/name_transfer_tx.ex:111: The inferred type for the 4th argument of preprocess_check/5 (atom() | #{'hash':=_, _=>_}) is not a supertype of #{'__struct__':='Elixir.Aecore.Account.Tx.SpendTx', 'amount':=non_neg_integer(), 'payload':=binary(), 'receiver':=binary(), 'version':=non_neg_integer()}, which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
apps/aecore/lib/aecore/naming/tx/name_update_tx.ex:129: The specified type for the 4th argument of preprocess_check/5 (#{'__struct__':='Elixir.Aecore.Naming.Tx.NameUpdateTx', 'client_ttl':=non_neg_integer(), 'expire_by':=non_neg_integer(), 'hash':=binary(), 'pointers':=binary()}) is not a supertype of #{'__struct__':='Elixir.Aecore.Account.Tx.SpendTx', 'amount':=non_neg_integer(), 'payload':=binary(), 'receiver':=binary(), 'version':=non_neg_integer()}, which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
apps/aecore/lib/aecore/naming/tx/name_update_tx.ex:136: The inferred type for the 4th argument of preprocess_check/5 (atom() | #{'hash':=_, _=>_}) is not a supertype of #{'__struct__':='Elixir.Aecore.Account.Tx.SpendTx', 'amount':=non_neg_integer(), 'payload':=binary(), 'receiver':=binary(), 'version':=non_neg_integer()}, which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
apps/aecore/lib/aecore/oracle/oracle.ex:386: The variable _ can never match since previous clauses completely covered the type 'Elixir.Oracle' | 'Elixir.OracleQuery'
apps/aecore/lib/aecore/oracle/tx/oracle_extend_tx.ex:77: The specified type for the 4th argument of preprocess_check/5 (#{'__struct__':='Elixir.Aecore.Oracle.Tx.OracleExtendTx', 'ttl':=non_neg_integer()}) is not a supertype of #{'__struct__':='Elixir.Aecore.Account.Tx.SpendTx', 'amount':=non_neg_integer(), 'payload':=binary(), 'receiver':=binary(), 'version':=non_neg_integer()}, which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
apps/aecore/lib/aecore/oracle/tx/oracle_query_tx.ex:147: The specified type for the 4th argument of preprocess_check/5 (#{'__struct__':='Elixir.Aecore.Oracle.Tx.OracleQueryTx', 'oracle_address':=binary(), 'query_data':=_, 'query_fee':=non_neg_integer(), 'query_ttl':=#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'response_ttl':=#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}}) is not a supertype of #{'__struct__':='Elixir.Aecore.Account.Tx.SpendTx', 'amount':=non_neg_integer(), 'payload':=binary(), 'receiver':=binary(), 'version':=non_neg_integer()}, which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
apps/aecore/lib/aecore/oracle/tx/oracle_query_tx.ex:154: The inferred type for the 4th argument of preprocess_check/5 (atom() | #{'query_fee':=number(), _=>_}) is not a supertype of #{'__struct__':='Elixir.Aecore.Account.Tx.SpendTx', 'amount':=non_neg_integer(), 'payload':=binary(), 'receiver':=binary(), 'version':=non_neg_integer()}, which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
apps/aecore/lib/aecore/oracle/tx/oracle_registration_tx.ex:128: The specified type for the 4th argument of preprocess_check/5 (#{'__struct__':='Elixir.Aecore.Oracle.Tx.OracleRegistrationTx', 'query_fee':=non_neg_integer(), 'query_format':=map(), 'response_format':=map(), 'ttl':=#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}}) is not a supertype of #{'__struct__':='Elixir.Aecore.Account.Tx.SpendTx', 'amount':=non_neg_integer(), 'payload':=binary(), 'receiver':=binary(), 'version':=non_neg_integer()}, which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
apps/aecore/lib/aecore/oracle/tx/oracle_response_tx.ex:105: The specified type for the 4th argument of preprocess_check/5 (#{'__struct__':='Elixir.Aecore.Oracle.Tx.OracleResponseTx', 'query_id':=binary(), 'response':=map()}) is not a supertype of #{'__struct__':='Elixir.Aecore.Account.Tx.SpendTx', 'amount':=non_neg_integer(), 'payload':=binary(), 'receiver':=binary(), 'version':=non_neg_integer()}, which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
apps/aecore/lib/aecore/tx/data_tx.ex:264: The specification for 'Elixir.Aecore.Tx.DataTx':standard_deduct_fee/4 has an opaque subtype gb_merkle_trees:tree() which is violated by the success typing (gb_merkle_trees:tree(),_,#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=#{'__struct__':='Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Oracle.Tx.OracleExtendTx' | 'Elixir.Aecore.Oracle.Tx.OracleQueryTx' | 'Elixir.Aecore.Oracle.Tx.OracleRegistrationTx' | 'Elixir.Aecore.Oracle.Tx.OracleResponseTx', 'amount'=>non_neg_integer(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'name'=>binary(), 'name_salt'=>binary(), 'oracle_address'=>binary(), 'payload'=>binary(), 'pointers'=>binary(), 'query_data'=>_, 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'query_ttl'=>map(), 'receiver'=>binary(), 'response'=>map(), 'response_format'=>map(), 'response_ttl'=>map(), 'target'=>binary(), 'ttl'=>non_neg_integer() | map(), 'version'=>non_neg_integer()}, 'senders':=[binary()], 'type':='Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Oracle.Tx.OracleExtendTx' | 'Elixir.Aecore.Oracle.Tx.OracleRegistrationTx' | 'Elixir.Aecore.Oracle.Tx.OracleResponseTx'},_) -> gb_merkle_trees:tree()
apps/aecore/lib/aecore/tx/data_tx.ex:296: Overloaded contract for 'Elixir.Aecore.Tx.DataTx':rlp_encode/1 has overlapping domains; such contracts are currently unsupported and are simply ignored
apps/aecore/lib/aecore/tx/data_tx.ex:466: Invalid type specification for function 'Elixir.Aecore.Tx.DataTx':rlp_decode/1. The success typing is (binary()) -> #{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=#{'__struct__':='Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Oracle.Tx.OracleExtendTx' | 'Elixir.Aecore.Oracle.Tx.OracleQueryTx' | 'Elixir.Aecore.Oracle.Tx.OracleRegistrationTx' | 'Elixir.Aecore.Oracle.Tx.OracleResponseTx', 'amount'=>non_neg_integer(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'name'=>binary(), 'name_salt'=>binary(), 'oracle_address'=>binary(), 'payload'=>binary(), 'pointers'=>binary(), 'query_data'=>_, 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'query_ttl'=>#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'receiver'=>binary(), 'response'=>map(), 'response_format'=>map(), 'response_ttl'=>#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'target'=>binary(), 'ttl'=>non_neg_integer() | #{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'version'=>non_neg_integer()}, 'senders':=[binary()], 'type':='Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Oracle.Tx.OracleExtendTx' | 'Elixir.Aecore.Oracle.Tx.OracleRegistrationTx' | 'Elixir.Aecore.Oracle.Tx.OracleResponseTx'}
apps/aecore/lib/aecore/tx/data_tx.ex:479: The call 'Elixir.Aecore.Tx.DataTx':init('Elixir.Aecore.Account.Tx.SpendTx',#{'amount':=_, 'payload':=_, 'receiver':=_, 'version':=1},Vsenders@1::any(),any(),any()) breaks the contract (tx_types(),payload(),[binary()] | binary(),non_neg_integer(),integer()) -> 'Elixir.Aecore.Tx.DataTx':t()
apps/aecore/lib/aecore/tx/data_tx.ex:494: The call 'Elixir.Aecore.Tx.DataTx':init('Elixir.Aecore.Account.Tx.CoinbaseTx',#{'amount':=_, 'receiver':=_},[],0,any()) breaks the contract (tx_types(),payload(),[binary()] | binary(),non_neg_integer(),integer()) -> 'Elixir.Aecore.Tx.DataTx':t()
apps/aecore/lib/aecore/tx/data_tx.ex:542: The call 'Elixir.Aecore.Tx.DataTx':init('Elixir.Aecore.Oracle.Tx.OracleQueryTx',Vpayload@1::#{'oracle_address':=_, 'query_data':=_, 'query_fee':=_, 'query_ttl':=#{'ttl':=_, 'type':='absolute' | 'relative'}, 'response_ttl':=#{'ttl':=_, 'type':='absolute' | 'relative'}},Vsenders@1::any(),any(),any()) breaks the contract (tx_types(),payload(),[binary()] | binary(),non_neg_integer(),integer()) -> 'Elixir.Aecore.Tx.DataTx':t()
apps/aecore/lib/aecore/tx/data_tx.ex:568: The call 'Elixir.Aecore.Tx.DataTx':init('Elixir.Aecore.Oracle.Tx.OracleRegistrationTx',Vpayload@1::#{'query_fee':=_, 'query_format':=_, 'response_format':=_, 'ttl':=#{'ttl':=_, 'type':='absolute' | 'relative'}},Vsenders@1::any(),any(),any()) breaks the contract (tx_types(),payload(),[binary()] | binary(),non_neg_integer(),integer()) -> 'Elixir.Aecore.Tx.DataTx':t()
apps/aecore/lib/aecore/tx/data_tx.ex:585: The call 'Elixir.Aecore.Tx.DataTx':init('Elixir.Aecore.Oracle.Tx.OracleResponseTx',Vpayload@1::#{'query_id':=_, 'response':=_},Vsenders@2::any(),any(),any()) breaks the contract (tx_types(),payload(),[binary()] | binary(),non_neg_integer(),integer()) -> 'Elixir.Aecore.Tx.DataTx':t()
apps/aecore/lib/aecore/tx/data_tx.ex:590: Call to missing or unexported function 'Elixir.Aeutil.Serialization':transform/2
apps/aecore/lib/aecore/tx/data_tx.ex:605: The call 'Elixir.Aecore.Tx.DataTx':init('Elixir.Aecore.Oracle.Tx.OracleExtendTx',Vpayload@1::#{'ttl':=_},Vsenders@2::any(),any(),any()) breaks the contract (tx_types(),payload(),[binary()] | binary(),non_neg_integer(),integer()) -> 'Elixir.Aecore.Tx.DataTx':t()
apps/aecore/lib/aecore/tx/data_tx.ex:687: The pattern 'Elixir.NameName' can never match the type 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx'
apps/aecore/lib/aecore/tx/data_tx.ex:689: The pattern 'Elixir.NameCommitment' can never match the type 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx'
apps/aecore/lib/aecore/tx/data_tx.ex:696: The variable Vtype@1 can never match since previous clauses completely covered the type 'Elixir.Aecore.Account.Tx.CoinbaseTx' | 'Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Oracle.Tx.OracleExtendTx' | 'Elixir.Aecore.Oracle.Tx.OracleQueryTx' | 'Elixir.Aecore.Oracle.Tx.OracleRegistrationTx' | 'Elixir.Aecore.Oracle.Tx.OracleResponseTx'
apps/aecore/lib/aecore/tx/data_tx.ex:724: The pattern 'Elixir.NameName' can never match the type 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx'
apps/aecore/lib/aecore/tx/data_tx.ex:726: The pattern 'Elixir.NameCommitment' can never match the type 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx'
apps/aecore/lib/aecore/tx/data_tx.ex:733: The variable Vver@1 can never match since previous clauses completely covered the type 'Elixir.Aecore.Account.Tx.CoinbaseTx' | 'Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Oracle.Tx.OracleExtendTx' | 'Elixir.Aecore.Oracle.Tx.OracleQueryTx' | 'Elixir.Aecore.Oracle.Tx.OracleRegistrationTx' | 'Elixir.Aecore.Oracle.Tx.OracleResponseTx'
apps/aecore/lib/aecore/tx/pool/worker.ex:91: The call 'Elixir.Aehttpserver.Web.Notify':broadcast_new_transaction_in_the_pool(Vtx@1::#{'__struct__':='Elixir.Aecore.Tx.SignedTx', 'data':=#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=#{'__struct__':='Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Oracle.Tx.OracleExtendTx' | 'Elixir.Aecore.Oracle.Tx.OracleQueryTx' | 'Elixir.Aecore.Oracle.Tx.OracleRegistrationTx' | 'Elixir.Aecore.Oracle.Tx.OracleResponseTx', 'amount'=>non_neg_integer(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'name'=>binary(), 'name_salt'=>binary(), 'oracle_address'=>binary(), 'payload'=>binary(), 'pointers'=>binary(), 'query_data'=>_, 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'query_ttl'=>#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'receiver'=>binary(), 'response'=>map(), 'response_format'=>map(), 'response_ttl'=>#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'target'=>binary(), 'ttl'=>non_neg_integer() | #{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'version'=>non_neg_integer()}, 'senders':=[binary()], 'type':='Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Oracle.Tx.OracleExtendTx' | 'Elixir.Aecore.Oracle.Tx.OracleRegistrationTx' | 'Elixir.Aecore.Oracle.Tx.OracleResponseTx'}, 'signatures':=[binary()]}) will never return since it differs in the 1st argument from the success typing arguments: (#{'__struct__':='Elixir.Aecore.Tx.SignedTx', 'data':=#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=atom() | binary() | [any()] | map(), 'nonce':=atom() | binary() | [any()] | map(), 'payload':=atom() | binary() | [any()] | map(), 'senders':=[any()], 'type':=atom() | binary() | [any()] | map(), _=>_}, 'signatures':=[any()], _=>_})
apps/aecore/lib/aecore/tx/pool/worker.ex:121: The pattern #{'txs':=_@2} can never match the type {'error',binary()} | {'ok',#{'__struct__':='Elixir.Aecore.Chain.Block', 'header':=#{'__struct__':='Elixir.Aecore.Chain.Header', 'height':=non_neg_integer(), 'nonce':=non_neg_integer(), 'pow_evidence':=_, 'prev_hash':=binary(), 'root_hash':=binary(), 'target':=non_neg_integer(), 'time':=non_neg_integer(), 'txs_hash':=binary(), 'version':=non_neg_integer()}, 'txs':=[#{'__struct__':='Elixir.Aecore.Tx.SignedTx', 'data':=#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=#{'__struct__':='Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Oracle.Tx.OracleExtendTx' | 'Elixir.Aecore.Oracle.Tx.OracleQueryTx' | 'Elixir.Aecore.Oracle.Tx.OracleRegistrationTx' | 'Elixir.Aecore.Oracle.Tx.OracleResponseTx', 'amount'=>non_neg_integer(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'name'=>binary(), 'name_salt'=>binary(), 'oracle_address'=>binary(), 'payload'=>binary(), 'pointers'=>binary(), 'query_data'=>_, 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'query_ttl'=>#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'receiver'=>binary(), 'response'=>map(), 'response_format'=>map(), 'response_ttl'=>#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'target'=>binary(), 'ttl'=>non_neg_integer() | #{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'version'=>non_neg_integer()}, 'senders':=[binary()], 'type':='Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Oracle.Tx.OracleExtendTx' | 'Elixir.Aecore.Oracle.Tx.OracleRegistrationTx' | 'Elixir.Aecore.Oracle.Tx.OracleResponseTx'}, 'signatures':=[binary()]}]}}
apps/aecore/lib/aecore/tx/signed_tx.ex:196: Invalid type specification for function 'Elixir.Aecore.Tx.SignedTx':deserialize/1. The success typing is ('nil' | binary() | [any()] | map()) -> #{'__struct__':='Elixir.Aecore.Tx.SignedTx', 'data':=#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=#{'__struct__':='Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Oracle.Tx.OracleExtendTx' | 'Elixir.Aecore.Oracle.Tx.OracleQueryTx' | 'Elixir.Aecore.Oracle.Tx.OracleRegistrationTx' | 'Elixir.Aecore.Oracle.Tx.OracleResponseTx', 'amount'=>non_neg_integer(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'name'=>binary(), 'name_salt'=>binary(), 'oracle_address'=>binary(), 'payload'=>binary(), 'pointers'=>binary(), 'query_data'=>_, 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'query_ttl'=>map(), 'receiver'=>binary(), 'response'=>map(), 'response_format'=>map(), 'response_ttl'=>map(), 'target'=>binary(), 'ttl'=>non_neg_integer() | map(), 'version'=>non_neg_integer()}, 'senders':=[binary()], 'type':='Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Oracle.Tx.OracleExtendTx' | 'Elixir.Aecore.Oracle.Tx.OracleRegistrationTx' | 'Elixir.Aecore.Oracle.Tx.OracleResponseTx'}, 'signatures':=[binary()]}
apps/aecore/lib/aecore/tx/signed_tx.ex:281: The variable _ can never match since previous clauses completely covered the type 'Elixir.Aecore.Tx.SignedTx'
apps/aecore/lib/aecore/tx/signed_tx.ex:289: The variable _ can never match since previous clauses completely covered the type 'Elixir.Aecore.Tx.SignedTx'
apps/aehttpserver/lib/aehttpserver/web/controllers/block_controller.ex:32: The call 'Elixir.Aeutil.Serialization':block(Vblock@1::#{'__struct__':='Elixir.Aecore.Chain.Block', 'header':=#{'__struct__':='Elixir.Aecore.Chain.Header', 'height':=non_neg_integer(), 'nonce':=non_neg_integer(), 'pow_evidence':=_, 'prev_hash':=binary(), 'root_hash':=binary(), 'target':=non_neg_integer(), 'time':=non_neg_integer(), 'txs_hash':=binary(), 'version':=non_neg_integer()}, 'txs':=[#{'__struct__':='Elixir.Aecore.Tx.SignedTx', 'data':=#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=#{'__struct__':='Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Oracle.Tx.OracleExtendTx' | 'Elixir.Aecore.Oracle.Tx.OracleQueryTx' | 'Elixir.Aecore.Oracle.Tx.OracleRegistrationTx' | 'Elixir.Aecore.Oracle.Tx.OracleResponseTx', 'amount'=>non_neg_integer(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'name'=>binary(), 'name_salt'=>binary(), 'oracle_address'=>binary(), 'payload'=>binary(), 'pointers'=>binary(), 'query_data'=>_, 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'query_ttl'=>#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'receiver'=>binary(), 'response'=>map(), 'response_format'=>map(), 'response_ttl'=>#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'target'=>binary(), 'ttl'=>non_neg_integer() | #{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'version'=>non_neg_integer()}, 'senders':=[binary()], 'type':='Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Oracle.Tx.OracleExtendTx' | 'Elixir.Aecore.Oracle.Tx.OracleRegistrationTx' | 'Elixir.Aecore.Oracle.Tx.OracleResponseTx'}, 'signatures':=[binary()]}]},'serialize') will never return since it differs in the 2nd argument from the success typing arguments: (map(),'deserialize')
apps/aehttpserver/lib/aehttpserver/web/controllers/tx_controller.ex:23: The call 'Elixir.Aeutil.Serialization':serialize_txs_info_to_json(Vuser_txs@1::[any(),...]) will never return since the success typing is ([atom() | #{'block_hash':=binary(), 'block_height':=_, 'fee':=non_neg_integer(), 'nonce':=integer(), 'payload':=map(), 'senders':=binary() | [any()], 'signatures':=_, 'type':='Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Oracle.Tx.OracleExtendTx' | 'Elixir.Aecore.Oracle.Tx.OracleRegistrationTx' | 'Elixir.Aecore.Oracle.Tx.OracleResponseTx', _=>_}]) -> [any()] and the contract is ([raw_data()]) -> [map()]
apps/aehttpserver/lib/aehttpserver/web/controllers/tx_controller.ex:31: The call 'Elixir.Aeutil.Serialization':serialize_txs_info_to_json(Vuser_txs@1::[any(),...]) will never return since the success typing is ([atom() | #{'block_hash':=binary(), 'block_height':=_, 'fee':=non_neg_integer(), 'nonce':=integer(), 'payload':=map(), 'senders':=binary() | [any()], 'signatures':=_, 'type':='Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Oracle.Tx.OracleExtendTx' | 'Elixir.Aecore.Oracle.Tx.OracleRegistrationTx' | 'Elixir.Aecore.Oracle.Tx.OracleResponseTx', _=>_}]) -> [any()] and the contract is ([raw_data()]) -> [map()]
apps/aecore/lib/aecore/account/account.ex:395: The variable _ can never match since previous clauses completely covered the type 'Elixir.Aecore.Account.Account'
apps/aecore/lib/aecore/chain/block.ex:76: The variable _ can never match since previous clauses completely covered the type 'Elixir.Aecore.Chain.Block'
apps/aecore/lib/aecore/chain/chainstate.ex:64: Invalid type specification for function 'Elixir.Aecore.Chain.Chainstate':apply_transaction_on_state/3. The success typing is (_,_,#{'__struct__':='Elixir.Aecore.Tx.SignedTx', 'data':=#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=#{'__struct__':='Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Oracle.Tx.OracleExtendTx' | 'Elixir.Aecore.Oracle.Tx.OracleQueryTx' | 'Elixir.Aecore.Oracle.Tx.OracleRegistrationTx' | 'Elixir.Aecore.Oracle.Tx.OracleResponseTx', 'amount'=>non_neg_integer(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'name'=>binary(), 'name_salt'=>binary(), 'oracle_address'=>binary(), 'payload'=>binary(), 'pointers'=>binary(), 'query_data'=>_, 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'query_ttl'=>map(), 'receiver'=>binary(), 'response'=>map(), 'response_format'=>map(), 'response_ttl'=>map(), 'target'=>binary(), 'ttl'=>non_neg_integer() | map(), 'version'=>non_neg_integer()}, 'senders':=[binary()], 'type':='Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Oracle.Tx.OracleExtendTx' | 'Elixir.Aecore.Oracle.Tx.OracleRegistrationTx' | 'Elixir.Aecore.Oracle.Tx.OracleResponseTx'}, 'signatures':=[binary()]}) -> {'error',binary()} | {'ok',_}
apps/aecore/lib/aecore/chain/chainstate.ex:131: The pattern 'none' can never match the type #{'__struct__':='Elixir.Aecore.Account.Account', 'balance':=non_neg_integer(), 'last_updated':=non_neg_integer(), 'nonce':=non_neg_integer(), 'pubkey':=binary()}
apps/aecore/lib/aecore/chain/chainstate.ex:150: Invalid type specification for function 'Elixir.Aecore.Chain.Chainstate':rlp_decode/1. The success typing is (_) -> {'error',<<_:232,_:_*80>>} | {'ok',#{'__struct__':='Elixir.Aecore.Account.Account', 'balance':=non_neg_integer(), 'last_updated':=non_neg_integer(), 'nonce':=non_neg_integer(), 'pubkey':=binary()}}
apps/aecore/lib/aecore/naming/naming.ex:220: The variable _ can never match since previous clauses completely covered the type 'Elixir.Name' | 'Elixir.NameCommitment'
apps/aecore/lib/aecore/oracle/oracle.ex:385: The variable _ can never match since previous clauses completely covered the type 'Elixir.Oracle' | 'Elixir.OracleQuery'
apps/aecore/lib/aecore/tx/data_tx.ex:261: The specification for 'Elixir.Aecore.Tx.DataTx':standard_deduct_fee/4 has an opaque subtype gb_merkle_trees:tree() which is violated by the success typing (gb_merkle_trees:tree(),_,#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=#{'__struct__':='Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Oracle.Tx.OracleExtendTx' | 'Elixir.Aecore.Oracle.Tx.OracleQueryTx' | 'Elixir.Aecore.Oracle.Tx.OracleRegistrationTx' | 'Elixir.Aecore.Oracle.Tx.OracleResponseTx', 'amount'=>non_neg_integer(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'name'=>binary(), 'name_salt'=>binary(), 'oracle_address'=>binary(), 'payload'=>binary(), 'pointers'=>binary(), 'query_data'=>_, 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'query_ttl'=>map(), 'receiver'=>binary(), 'response'=>map(), 'response_format'=>map(), 'response_ttl'=>map(), 'target'=>binary(), 'ttl'=>non_neg_integer() | map(), 'version'=>non_neg_integer()}, 'senders':=[binary()], 'type':='Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Oracle.Tx.OracleExtendTx' | 'Elixir.Aecore.Oracle.Tx.OracleRegistrationTx' | 'Elixir.Aecore.Oracle.Tx.OracleResponseTx'},_) -> gb_merkle_trees:tree()
apps/aecore/lib/aecore/tx/data_tx.ex:311: The call 'Elixir.Aecore.Tx.DataTx':get_version('Elixir.Aecore.Account.Tx.CoinbaseTx') breaks the contract (tx_types()) -> non_neg_integer() | {'error','Elixir.String':t()}
apps/aecore/lib/aecore/tx/data_tx.ex:343: The call 'Elixir.Aecore.Tx.DataTx':get_version('Elixir.Aecore.Oracle.Tx.OracleQueryTx') breaks the contract (tx_types()) -> non_neg_integer() | {'error','Elixir.String':t()}
apps/aecore/lib/aecore/tx/data_tx.ex:474: The call 'Elixir.Aecore.Tx.DataTx':init('Elixir.Aecore.Account.Tx.SpendTx',#{'amount':='false' | 'nil' | 'true' | binary() | [any()] | number() | map(), 'payload':=_, 'receiver':=_, 'version':=1},Vsenders@1::any(),'false' | 'nil' | 'true' | binary() | [any()] | number() | map(),'false' | 'nil' | 'true' | binary() | [any()] | number() | map()) breaks the contract (tx_types(),payload(),[binary()] | binary(),non_neg_integer(),integer()) -> 'Elixir.Aecore.Tx.DataTx':t()
apps/aecore/lib/aecore/tx/data_tx.ex:488: The pattern <'Elixir.Aecore.Account.Tx.CoinbaseTx', [Vreceiver@1, Vnonce@1, Vamount@1]> can never match the type <'Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Oracle.Tx.OracleExtendTx' | 'Elixir.Aecore.Oracle.Tx.OracleRegistrationTx' | 'Elixir.Aecore.Oracle.Tx.OracleResponseTx' | {'error',<<_:64,_:_*8>>},_>
apps/aecore/lib/aecore/tx/data_tx.ex:501: The pattern <'Elixir.Aecore.Oracle.Tx.OracleQueryTx', [Vsenders@1, Vnonce@1, Voracle_address@1, Vquery_data@1, Vquery_fee@1, Vquery_ttl_type@1, Vquery_ttl_value@1, Vresponse_ttl_type@1, Vresponse_ttl_value@1, Vfee@1]> can never match the type <'Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Oracle.Tx.OracleExtendTx' | 'Elixir.Aecore.Oracle.Tx.OracleRegistrationTx' | 'Elixir.Aecore.Oracle.Tx.OracleResponseTx' | {'error',<<_:64,_:_*8>>},_>
apps/aecore/lib/aecore/tx/data_tx.ex:565: The call 'Elixir.Aecore.Tx.DataTx':init('Elixir.Aecore.Oracle.Tx.OracleRegistrationTx',Vpayload@1::#{'query_fee':='false' | 'nil' | 'true' | binary() | [any()] | number() | map(), 'query_format':='false' | 'nil' | 'true' | binary() | [any()] | number() | map(), 'response_format':='false' | 'nil' | 'true' | binary() | [any()] | number() | map(), 'ttl':=#{'ttl':='false' | 'nil' | 'true' | binary() | [any()] | number() | map(), 'type':='absolute' | 'relative'}},Vsenders@1::any(),'false' | 'nil' | 'true' | binary() | [any()] | number() | map(),'false' | 'nil' | 'true' | binary() | [any()] | number() | map()) breaks the contract (tx_types(),payload(),[binary()] | binary(),non_neg_integer(),integer()) -> 'Elixir.Aecore.Tx.DataTx':t()
apps/aecore/lib/aecore/tx/data_tx.ex:580: The call 'Elixir.Aecore.Tx.DataTx':init('Elixir.Aecore.Oracle.Tx.OracleResponseTx',Vpayload@1::#{'query_id':='false' | 'nil' | 'true' | binary() | [any()] | number() | map(), 'response':='false' | 'nil' | 'true' | binary() | [any()] | number() | map()},Vsenders@1::any(),'false' | 'nil' | 'true' | binary() | [any()] | number() | map(),any()) breaks the contract (tx_types(),payload(),[binary()] | binary(),non_neg_integer(),integer()) -> 'Elixir.Aecore.Tx.DataTx':t()
apps/aecore/lib/aecore/tx/data_tx.ex:585: Call to missing or unexported function 'Elixir.Aeutil.Serialization':transform/2
apps/aecore/lib/aecore/tx/data_tx.ex:594: The call 'Elixir.Aecore.Tx.DataTx':init('Elixir.Aecore.Oracle.Tx.OracleExtendTx',Vpayload@1::#{'ttl':='false' | 'nil' | 'true' | binary() | [any()] | number() | map()},Vsenders@1::any(),'false' | 'nil' | 'true' | binary() | [any()] | number() | map(),'false' | 'nil' | 'true' | binary() | [any()] | number() | map()) breaks the contract (tx_types(),payload(),[binary()] | binary(),non_neg_integer(),integer()) -> 'Elixir.Aecore.Tx.DataTx':t()
apps/aecore/lib/aecore/tx/data_tx.ex:679: The pattern 'Elixir.NameName' can never match the type 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx'
apps/aecore/lib/aecore/tx/data_tx.ex:680: The pattern 'Elixir.NameCommitment' can never match the type 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx'
apps/aecore/lib/aecore/tx/data_tx.ex:687: The variable Vtype@1 can never match since previous clauses completely covered the type 'Elixir.Aecore.Account.Tx.CoinbaseTx' | 'Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Oracle.Tx.OracleExtendTx' | 'Elixir.Aecore.Oracle.Tx.OracleQueryTx' | 'Elixir.Aecore.Oracle.Tx.OracleRegistrationTx' | 'Elixir.Aecore.Oracle.Tx.OracleResponseTx'
apps/aecore/lib/aecore/tx/data_tx.ex:712: The pattern 'Elixir.NameName' can never match the type 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx'
apps/aecore/lib/aecore/tx/data_tx.ex:713: The pattern 'Elixir.NameCommitment' can never match the type 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx'
apps/aecore/lib/aecore/tx/data_tx.ex:720: The variable Vver@1 can never match since previous clauses completely covered the type 'Elixir.Aecore.Account.Tx.CoinbaseTx' | 'Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Oracle.Tx.OracleExtendTx' | 'Elixir.Aecore.Oracle.Tx.OracleQueryTx' | 'Elixir.Aecore.Oracle.Tx.OracleRegistrationTx' | 'Elixir.Aecore.Oracle.Tx.OracleResponseTx'
apps/aecore/lib/aecore/tx/pool/worker.ex:90: The call 'Elixir.Aehttpserver.Web.Notify':broadcast_new_transaction_in_the_pool(Vtx@1::#{'__struct__':='Elixir.Aecore.Tx.SignedTx', 'data':=#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=#{'__struct__':='Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Oracle.Tx.OracleExtendTx' | 'Elixir.Aecore.Oracle.Tx.OracleQueryTx' | 'Elixir.Aecore.Oracle.Tx.OracleRegistrationTx' | 'Elixir.Aecore.Oracle.Tx.OracleResponseTx', 'amount'=>non_neg_integer(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'name'=>binary(), 'name_salt'=>binary(), 'oracle_address'=>binary(), 'payload'=>binary(), 'pointers'=>binary(), 'query_data'=>_, 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'query_ttl'=>#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'receiver'=>binary(), 'response'=>map(), 'response_format'=>map(), 'response_ttl'=>#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'target'=>binary(), 'ttl'=>non_neg_integer() | #{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'version'=>non_neg_integer()}, 'senders':=[binary()], 'type':='Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Oracle.Tx.OracleExtendTx' | 'Elixir.Aecore.Oracle.Tx.OracleRegistrationTx' | 'Elixir.Aecore.Oracle.Tx.OracleResponseTx'}, 'signatures':=[binary()]}) will never return since it differs in the 1st argument from the success typing arguments: (#{'__struct__':='Elixir.Aecore.Tx.SignedTx', 'data':=#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=atom() | binary() | [any()] | map(), 'nonce':=atom() | binary() | [any()] | map(), 'payload':=atom() | binary() | [any()] | map(), 'senders':=[any()], 'type':=atom() | binary() | [any()] | map(), _=>_}, 'signatures':=[any()], _=>_})
apps/aecore/lib/aecore/tx/pool/worker.ex:120: The pattern #{'txs':=_@2} can never match the type {'error',binary()} | {'ok',#{'__struct__':='Elixir.Aecore.Chain.Block', 'header':=#{'__struct__':='Elixir.Aecore.Chain.Header', 'height':=non_neg_integer(), 'nonce':=non_neg_integer(), 'pow_evidence':=_, 'prev_hash':=binary(), 'root_hash':=binary(), 'target':=non_neg_integer(), 'time':=non_neg_integer(), 'txs_hash':=binary(), 'version':=non_neg_integer()}, 'txs':=[#{'__struct__':='Elixir.Aecore.Tx.SignedTx', 'data':=#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=#{'__struct__':='Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Oracle.Tx.OracleExtendTx' | 'Elixir.Aecore.Oracle.Tx.OracleQueryTx' | 'Elixir.Aecore.Oracle.Tx.OracleRegistrationTx' | 'Elixir.Aecore.Oracle.Tx.OracleResponseTx', 'amount'=>non_neg_integer(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'name'=>binary(), 'name_salt'=>binary(), 'oracle_address'=>binary(), 'payload'=>binary(), 'pointers'=>binary(), 'query_data'=>_, 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'query_ttl'=>#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'receiver'=>binary(), 'response'=>map(), 'response_format'=>map(), 'response_ttl'=>#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'target'=>binary(), 'ttl'=>non_neg_integer() | #{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'version'=>non_neg_integer()}, 'senders':=[binary()], 'type':='Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Oracle.Tx.OracleExtendTx' | 'Elixir.Aecore.Oracle.Tx.OracleRegistrationTx' | 'Elixir.Aecore.Oracle.Tx.OracleResponseTx'}, 'signatures':=[binary()]}]}}
apps/aecore/lib/aecore/naming/naming.ex:69: Invalid type specification for function 'Elixir.Aecore.Naming.Naming':create_claim/6. The success typing is (_,_,_,_,_,_) -> #{'expires':=_, 'hash':=_, 'name':=_, 'owner':=_, 'pointers':=_, 'status':='claimed', 'ttl':=_}
apps/aecore/lib/aecore/naming/naming.ex:88: Invalid type specification for function 'Elixir.Aecore.Naming.Naming':create_claim/4. The success typing is (_,_,_,number()) -> #{'expires':=number(), 'hash':=_, 'name':=_, 'owner':=_, 'pointers':=[], 'status':='claimed', 'ttl':=86400}
apps/aecore/lib/aecore/naming/naming.ex:223: The variable _ can never match since previous clauses completely covered the type 'Elixir.Name' | 'Elixir.NameCommitment'
apps/aecore/lib/aecore/naming/tx/name_claim_tx.ex:80: The specification for 'Elixir.Aecore.Naming.Tx.NameClaimTx':process_chainstate/5 has an opaque subtype gb_merkle_trees:tree() which is violated by the success typing (_,map(),number(),#{'__struct__':='Elixir.Aecore.Naming.Tx.NameClaimTx', 'name':=binary(), 'name_salt':=binary(), _=>_},#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=#{'__struct__':='Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Oracle.Tx.OracleExtendTx' | 'Elixir.Aecore.Oracle.Tx.OracleQueryTx' | 'Elixir.Aecore.Oracle.Tx.OracleRegistrationTx' | 'Elixir.Aecore.Oracle.Tx.OracleResponseTx', 'amount'=>non_neg_integer(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'name'=>binary(), 'name_salt'=>binary(), 'oracle_address'=>binary(), 'payload'=>binary(), 'pointers'=>binary(), 'query_data'=>_, 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'query_ttl'=>#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'receiver'=>binary(), 'response'=>map(), 'response_format'=>map(), 'response_ttl'=>#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'target'=>binary(), 'ttl'=>non_neg_integer() | #{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'version'=>non_neg_integer()}, 'senders':=[binary()], 'type':='Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Oracle.Tx.OracleExtendTx' | 'Elixir.Aecore.Oracle.Tx.OracleRegistrationTx' | 'Elixir.Aecore.Oracle.Tx.OracleResponseTx'}) -> {'ok',{_,map()}}
apps/aecore/lib/aecore/tx/data_tx.ex:568: The call 'Elixir.Aecore.Tx.DataTx':init('Elixir.Aecore.Oracle.Tx.OracleRegistrationTx',Vpayload@1::#{'query_fee':='false' | 'nil' | 'true' | binary() | [any()] | number() | map(), 'query_format':=binary(), 'response_format':=binary(), 'ttl':=#{'ttl':='false' | 'nil' | 'true' | binary() | [any()] | number() | map(), 'type':='absolute' | 'relative'}},Vsenders@1::any(),'false' | 'nil' | 'true' | binary() | [any()] | number() | map(),'false' | 'nil' | 'true' | binary() | [any()] | number() | map()) breaks the contract (tx_types(),payload(),[binary()] | binary(),non_neg_integer(),integer()) -> 'Elixir.Aecore.Tx.DataTx':t()
apps/aecore/lib/aecore/tx/data_tx.ex:585: The call 'Elixir.Aecore.Tx.DataTx':init('Elixir.Aecore.Oracle.Tx.OracleResponseTx',Vpayload@1::#{'query_id':=binary(), 'response':=binary()},Vsenders@1::any(),'false' | 'nil' | 'true' | binary() | [any()] | number() | map(),any()) breaks the contract (tx_types(),payload(),[binary()] | binary(),non_neg_integer(),integer()) -> 'Elixir.Aecore.Tx.DataTx':t()
apps/aecore/lib/aecore/tx/data_tx.ex:599: The call 'Elixir.Aecore.Tx.DataTx':init('Elixir.Aecore.Oracle.Tx.OracleExtendTx',Vpayload@1::#{'ttl':='false' | 'nil' | 'true' | binary() | [any()] | number() | map()},Vsenders@1::any(),'false' | 'nil' | 'true' | binary() | [any()] | number() | map(),'false' | 'nil' | 'true' | binary() | [any()] | number() | map()) breaks the contract (tx_types(),payload(),[binary()] | binary(),non_neg_integer(),integer()) -> 'Elixir.Aecore.Tx.DataTx':t()
apps/aecore/lib/aecore/tx/data_tx.ex:684: The pattern 'Elixir.NameName' can never match the type 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx'
apps/aecore/lib/aecore/tx/data_tx.ex:685: The pattern 'Elixir.NameCommitment' can never match the type 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx'
apps/aecore/lib/aecore/tx/data_tx.ex:692: The variable Vtype@1 can never match since previous clauses completely covered the type 'Elixir.Aecore.Account.Tx.CoinbaseTx' | 'Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Oracle.Tx.OracleExtendTx' | 'Elixir.Aecore.Oracle.Tx.OracleQueryTx' | 'Elixir.Aecore.Oracle.Tx.OracleRegistrationTx' | 'Elixir.Aecore.Oracle.Tx.OracleResponseTx'
apps/aecore/lib/aecore/tx/data_tx.ex:717: The pattern 'Elixir.NameName' can never match the type 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx'
apps/aecore/lib/aecore/tx/data_tx.ex:718: The pattern 'Elixir.NameCommitment' can never match the type 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx'
apps/aecore/lib/aecore/tx/data_tx.ex:725: The variable Vver@1 can never match since previous clauses completely covered the type 'Elixir.Aecore.Account.Tx.CoinbaseTx' | 'Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Oracle.Tx.OracleExtendTx' | 'Elixir.Aecore.Oracle.Tx.OracleQueryTx' | 'Elixir.Aecore.Oracle.Tx.OracleRegistrationTx' | 'Elixir.Aecore.Oracle.Tx.OracleResponseTx'
apps/aecore/lib/aecore/tx/data_tx.ex:569: The call 'Elixir.Aecore.Tx.DataTx':init('Elixir.Aecore.Oracle.Tx.OracleRegistrationTx',Vpayload@1::#{'query_fee':='false' | 'nil' | 'true' | binary() | [any()] | number() | map(), 'query_format':=binary(), 'response_format':=binary(), 'ttl':=#{'ttl':='false' | 'nil' | 'true' | binary() | [any()] | number() | map(), 'type':='absolute' | 'relative'}},Vsenders@1::any(),'false' | 'nil' | 'true' | binary() | [any()] | number() | map(),'false' | 'nil' | 'true' | binary() | [any()] | number() | map()) breaks the contract (tx_types(),payload(),[binary()] | binary(),non_neg_integer(),integer()) -> 'Elixir.Aecore.Tx.DataTx':t()
apps/aecore/lib/aecore/tx/data_tx.ex:587: The call 'Elixir.Aecore.Tx.DataTx':init('Elixir.Aecore.Oracle.Tx.OracleResponseTx',Vpayload@1::#{'query_id':=binary(), 'response':=binary()},Vsenders@1::any(),'false' | 'nil' | 'true' | binary() | [any()] | number() | map(),'false' | 'nil' | 'true' | binary() | [any()] | number() | map()) breaks the contract (tx_types(),payload(),[binary()] | binary(),non_neg_integer(),integer()) -> 'Elixir.Aecore.Tx.DataTx':t()
apps/aecore/lib/aecore/tx/data_tx.ex:601: The call 'Elixir.Aecore.Tx.DataTx':init('Elixir.Aecore.Oracle.Tx.OracleExtendTx',Vpayload@1::#{'ttl':='false' | 'nil' | 'true' | binary() | [any()] | number() | map()},Vsenders@1::any(),'false' | 'nil' | 'true' | binary() | [any()] | number() | map(),'false' | 'nil' | 'true' | binary() | [any()] | number() | map()) breaks the contract (tx_types(),payload(),[binary()] | binary(),non_neg_integer(),integer()) -> 'Elixir.Aecore.Tx.DataTx':t()
apps/aecore/lib/aecore/tx/data_tx.ex:686: The pattern 'Elixir.NameName' can never match the type 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx'
apps/aecore/lib/aecore/tx/data_tx.ex:687: The pattern 'Elixir.NameCommitment' can never match the type 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx'
apps/aecore/lib/aecore/tx/data_tx.ex:694: The variable Vtype@1 can never match since previous clauses completely covered the type 'Elixir.Aecore.Account.Tx.CoinbaseTx' | 'Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Oracle.Tx.OracleExtendTx' | 'Elixir.Aecore.Oracle.Tx.OracleQueryTx' | 'Elixir.Aecore.Oracle.Tx.OracleRegistrationTx' | 'Elixir.Aecore.Oracle.Tx.OracleResponseTx'
apps/aecore/lib/aecore/tx/data_tx.ex:719: The pattern 'Elixir.NameName' can never match the type 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx'
apps/aecore/lib/aecore/tx/data_tx.ex:720: The pattern 'Elixir.NameCommitment' can never match the type 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx'
apps/aecore/lib/aecore/tx/data_tx.ex:727: The variable Vver@1 can never match since previous clauses completely covered the type 'Elixir.Aecore.Account.Tx.CoinbaseTx' | 'Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Oracle.Tx.OracleExtendTx' | 'Elixir.Aecore.Oracle.Tx.OracleQueryTx' | 'Elixir.Aecore.Oracle.Tx.OracleRegistrationTx' | 'Elixir.Aecore.Oracle.Tx.OracleResponseTx'
apps/aecore/lib/aecore/oracle/oracle.ex:387: The variable _ can never match since previous clauses completely covered the type 'Elixir.Oracle' | 'Elixir.OracleQuery'
apps/aecore/lib/aecore/tx/data_tx.ex:571: The call 'Elixir.Aecore.Tx.DataTx':init('Elixir.Aecore.Oracle.Tx.OracleRegistrationTx',Vpayload@1::#{'query_fee':='false' | 'nil' | 'true' | binary() | [any()] | number() | map(), 'query_format':=binary(), 'response_format':=binary(), 'ttl':=#{'ttl':='false' | 'nil' | 'true' | binary() | [any()] | number() | map(), 'type':='absolute' | 'relative'}},Vsenders@1::any(),'false' | 'nil' | 'true' | binary() | [any()] | number() | map(),'false' | 'nil' | 'true' | binary() | [any()] | number() | map()) breaks the contract (tx_types(),payload(),[binary()] | binary(),non_neg_integer(),integer()) -> 'Elixir.Aecore.Tx.DataTx':t()
apps/aecore/lib/aecore/tx/data_tx.ex:589: The call 'Elixir.Aecore.Tx.DataTx':init('Elixir.Aecore.Oracle.Tx.OracleResponseTx',Vpayload@1::#{'query_id':=binary(), 'response':=binary()},Vsenders@1::any(),'false' | 'nil' | 'true' | binary() | [any()] | number() | map(),'false' | 'nil' | 'true' | binary() | [any()] | number() | map()) breaks the contract (tx_types(),payload(),[binary()] | binary(),non_neg_integer(),integer()) -> 'Elixir.Aecore.Tx.DataTx':t()
apps/aecore/lib/aecore/tx/data_tx.ex:603: The call 'Elixir.Aecore.Tx.DataTx':init('Elixir.Aecore.Oracle.Tx.OracleExtendTx',Vpayload@1::#{'ttl':='false' | 'nil' | 'true' | binary() | [any()] | number() | map()},Vsenders@1::any(),'false' | 'nil' | 'true' | binary() | [any()] | number() | map(),'false' | 'nil' | 'true' | binary() | [any()] | number() | map()) breaks the contract (tx_types(),payload(),[binary()] | binary(),non_neg_integer(),integer()) -> 'Elixir.Aecore.Tx.DataTx':t()
apps/aecore/lib/aecore/tx/data_tx.ex:688: The pattern 'Elixir.NameName' can never match the type 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx'
apps/aecore/lib/aecore/tx/data_tx.ex:721: The pattern 'Elixir.NameName' can never match the type 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx'
apps/aecore/lib/aecore/tx/data_tx.ex:722: The pattern 'Elixir.NameCommitment' can never match the type 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx'
apps/aecore/lib/aecore/tx/data_tx.ex:729: The variable Vver@1 can never match since previous clauses completely covered the type 'Elixir.Aecore.Account.Tx.CoinbaseTx' | 'Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Oracle.Tx.OracleExtendTx' | 'Elixir.Aecore.Oracle.Tx.OracleQueryTx' | 'Elixir.Aecore.Oracle.Tx.OracleRegistrationTx' | 'Elixir.Aecore.Oracle.Tx.OracleResponseTx'
apps/aecore/lib/aecore/tx/data_tx.ex:571: The call 'Elixir.Aecore.Tx.DataTx':init('Elixir.Aecore.Oracle.Tx.OracleRegistrationTx',Vpayload@1::#{'query_fee':='false' | 'nil' | 'true' | binary() | [any()] | number() | map(), 'query_format':=binary(), 'response_format':=binary(), 'ttl':=#{'ttl':='false' | 'nil' | 'true' | binary() | [any()] | number() | map(), 'type':='absolute' | 'relative'}},Vsenders@1::any(),'false' | 'nil' | 'true' | binary() | [any()] | number() | map(),'false' | 'nil' | 'true' | binary() | [any()] | number() | map()) breaks the contract (tx_types(),payload(),[binary()] | binary(),non_neg_integer(),integer()) -> 'Elixir.Aecore.Tx.DataTx':t()
apps/aecore/lib/aecore/tx/data_tx.ex:589: The call 'Elixir.Aecore.Tx.DataTx':init('Elixir.Aecore.Oracle.Tx.OracleResponseTx',Vpayload@1::#{'query_id':=binary(), 'response':=binary()},Vsenders@1::any(),'false' | 'nil' | 'true' | binary() | [any()] | number() | map(),'false' | 'nil' | 'true' | binary() | [any()] | number() | map()) breaks the contract (tx_types(),payload(),[binary()] | binary(),non_neg_integer(),integer()) -> 'Elixir.Aecore.Tx.DataTx':t()
apps/aecore/lib/aecore/tx/data_tx.ex:603: The call 'Elixir.Aecore.Tx.DataTx':init('Elixir.Aecore.Oracle.Tx.OracleExtendTx',Vpayload@1::#{'ttl':='false' | 'nil' | 'true' | binary() | [any()] | number() | map()},Vsenders@1::any(),'false' | 'nil' | 'true' | binary() | [any()] | number() | map(),'false' | 'nil' | 'true' | binary() | [any()] | number() | map()) breaks the contract (tx_types(),payload(),[binary()] | binary(),non_neg_integer(),integer()) -> 'Elixir.Aecore.Tx.DataTx':t()
apps/aecore/lib/aecore/tx/data_tx.ex:688: The pattern 'Elixir.NameName' can never match the type 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx'
apps/aecore/lib/aecore/tx/data_tx.ex:721: The pattern 'Elixir.NameName' can never match the type 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx'
apps/aecore/lib/aecore/tx/data_tx.ex:722: The pattern 'Elixir.NameCommitment' can never match the type 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx'
apps/aecore/lib/aecore/tx/data_tx.ex:729: The variable Vver@1 can never match since previous clauses completely covered the type 'Elixir.Aecore.Account.Tx.CoinbaseTx' | 'Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Naming.Tx.NameClaimTx' | 'Elixir.Aecore.Naming.Tx.NamePreClaimTx' | 'Elixir.Aecore.Naming.Tx.NameRevokeTx' | 'Elixir.Aecore.Naming.Tx.NameTransferTx' | 'Elixir.Aecore.Naming.Tx.NameUpdateTx' | 'Elixir.Aecore.Oracle.Tx.OracleExtendTx' | 'Elixir.Aecore.Oracle.Tx.OracleQueryTx' | 'Elixir.Aecore.Oracle.Tx.OracleRegistrationTx' | 'Elixir.Aecore.Oracle.Tx.OracleResponseTx'
apps/aecore/lib/aecore/account/account.ex:393: The variable _ can never match since previous clauses completely covered the type 'Elixir.Aecore.Account.Account'
apps/aecore/lib/aecore/naming/naming.ex:224: The variable Vdata@1 can never match since previous clauses completely covered the type 'Elixir.Name' | 'Elixir.NameCommitment'
apps/aecore/lib/aecore/account/account.ex:386: The variable _ can never match since previous clauses completely covered the type 'Elixir.Aecore.Account.Account'
:0: Unknown function 'Elixir.Serialization':rlp_encode/2
apps/aecore/lib/aecore/account/account_state_tree.ex:21: Function put/3 has no local return
apps/aecore/lib/aecore/account/account_state_tree.ex:23: The call 'Elixir.Aeutil.Serialization':rlp_encode(Vacc@1::#{'pubkey':=_, _=>_},'as') breaks the contract ('Elixir.Aecore.Account.Account':t() | 'Elixir.Aecore.Tx.DataTx':t() | map(),'tx' | 'ac' | 'ro' | 'io' | 'signedtx') -> binary() | {'error','Elixir.String':t()}
apps/aecore/lib/aecore/account/account_state_tree.ex:40: Function update/3 has no local return
apps/aecore/lib/aecore/account/tx/spend_tx.ex:97: Function process_chainstate/5 has no local return
apps/aecore/lib/aecore/account/tx/spend_tx.ex:140: Function deduct_fee/5 has no local return
apps/aecore/lib/aecore/naming/tx/name_claim_tx.ex:164: Function deduct_fee/5 has no local return
apps/aecore/lib/aecore/naming/tx/name_pre_claim_tx.ex:136: Function deduct_fee/5 has no local return
apps/aecore/lib/aecore/naming/tx/name_revoke_tx.ex:148: Function deduct_fee/5 has no local return
apps/aecore/lib/aecore/naming/tx/name_transfer_tx.ex:149: Function deduct_fee/5 has no local return
apps/aecore/lib/aecore/naming/tx/name_update_tx.ex:180: Function deduct_fee/5 has no local return
apps/aecore/lib/aecore/oracle/tx/oracle_extend_tx.ex:116: Function deduct_fee/5 has no local return
apps/aecore/lib/aecore/oracle/tx/oracle_query_tx.ex:108: Function process_chainstate/5 has no local return
apps/aecore/lib/aecore/oracle/tx/oracle_query_tx.ex:200: Function deduct_fee/5 has no local return
apps/aecore/lib/aecore/oracle/tx/oracle_registration_tx.ex:170: Function deduct_fee/5 has no local return
apps/aecore/lib/aecore/oracle/tx/oracle_response_tx.ex:71: Function process_chainstate/5 has no local return
apps/aecore/lib/aecore/oracle/tx/oracle_response_tx.ex:159: Function deduct_fee/5 has no local return
apps/aecore/lib/aecore/tx/data_tx.ex:267: Function standard_deduct_fee/4 has no local return
apps/aecore/lib/aecore/tx/data_tx.ex:467: The call 'Elixir.Aecore.Tx.DataTx':init('Elixir.Aecore.Account.Tx.SpendTx',#{'amount':='false' | 'nil' | 'true' | binary() | [any()] | number() | map(), 'payload':=_, 'receiver':=_, 'version':=1},Vsenders@1::any(),'false' | 'nil' | 'true' | binary() | [any()] | number() | map(),'false' | 'nil' | 'true' | binary() | [any()] | number() | map()) breaks the contract (tx_types(),payload(),[binary()] | binary(),non_neg_integer(),integer()) -> 'Elixir.Aecore.Tx.DataTx':t()
apps/aecore/lib/aecore/tx/data_tx.ex:482: The call 'Elixir.Aecore.Tx.DataTx':init('Elixir.Aecore.Account.Tx.CoinbaseTx',#{'amount':='false' | 'nil' | 'true' | binary() | [any()] | number() | map(), 'receiver':=_},[],0,'false' | 'nil' | 'true' | binary() | [any()] | number() | map()) breaks the contract (tx_types(),payload(),[binary()] | binary(),non_neg_integer(),integer()) -> 'Elixir.Aecore.Tx.DataTx':t()
apps/aecore/lib/aecore/tx/data_tx.ex:529: The call 'Elixir.Aecore.Tx.DataTx':init('Elixir.Aecore.Oracle.Tx.OracleQueryTx',Vpayload@1::#{'oracle_address':=_, 'query_data':=binary(), 'query_fee':='false' | 'nil' | 'true' | binary() | [any()] | number() | map(), 'query_ttl':=#{'ttl':='false' | 'nil' | 'true' | binary() | [any()] | number() | map(), 'type':='absolute' | 'relative'}, 'response_ttl':=#{'ttl':='false' | 'nil' | 'true' | binary() | [any()] | number() | map(), 'type':='absolute' | 'relative'}},Vsenders@1::any(),'false' | 'nil' | 'true' | binary() | [any()] | number() | map(),'false' | 'nil' | 'true' | binary() | [any()] | number() | map()) breaks the contract (tx_types(),payload(),[binary()] | binary(),non_neg_integer(),integer()) -> 'Elixir.Aecore.Tx.DataTx':t()
apps/aecore/lib/aecore/tx/data_tx.ex:564: The call 'Elixir.Aecore.Tx.DataTx':init('Elixir.Aecore.Oracle.Tx.OracleRegistrationTx',Vpayload@1::#{'query_fee':='false' | 'nil' | 'true' | binary() | [any()] | number() | map(), 'query_format':=binary(), 'response_format':=binary(), 'ttl':=#{'ttl':='false' | 'nil' | 'true' | binary() | [any()] | number() | map(), 'type':='absolute' | 'relative'}},Vsenders@1::any(),'false' | 'nil' | 'true' | binary() | [any()] | number() | map(),'false' | 'nil' | 'true' | binary() | [any()] | number() | map()) breaks the contract (tx_types(),payload(),[binary()] | binary(),non_neg_integer(),integer()) -> 'Elixir.Aecore.Tx.DataTx':t()
apps/aecore/lib/aecore/tx/data_tx.ex:582: The call 'Elixir.Aecore.Tx.DataTx':init('Elixir.Aecore.Oracle.Tx.OracleResponseTx',Vpayload@1::#{'query_id':=binary(), 'response':=binary()},Vsenders@1::any(),'false' | 'nil' | 'true' | binary() | [any()] | number() | map(),'false' | 'nil' | 'true' | binary() | [any()] | number() | map()) breaks the contract (tx_types(),payload(),[binary()] | binary(),non_neg_integer(),integer()) -> 'Elixir.Aecore.Tx.DataTx':t()
apps/aecore/lib/aecore/tx/data_tx.ex:596: The call 'Elixir.Aecore.Tx.DataTx':init('Elixir.Aecore.Oracle.Tx.OracleExtendTx',Vpayload@1::#{'ttl':='false' | 'nil' | 'true' | binary() | [any()] | number() | map()},Vsenders@1::any(),'false' | 'nil' | 'true' | binary() | [any()] | number() | map(),'false' | 'nil' | 'true' | binary() | [any()] | number() | map()) breaks the contract (tx_types(),payload(),[binary()] | binary(),non_neg_integer(),integer()) -> 'Elixir.Aecore.Tx.DataTx':t()
apps/aecore/lib/aecore/tx/data_tx.ex:522: The call 'Elixir.Aecore.Tx.DataTx':init('Elixir.Aecore.Account.Tx.SpendTx',#{'amount':='false' | 'nil' | 'true' | binary() | [any()] | number() | map(), 'payload':=_, 'receiver':=_, 'version':=1},Vsenders@1::any(),'false' | 'nil' | 'true' | binary() | [any()] | number() | map(),'false' | 'nil' | 'true' | binary() | [any()] | number() | map()) breaks the contract (tx_types(),payload(),[binary()] | binary(),non_neg_integer(),integer()) -> 'Elixir.Aecore.Tx.DataTx':t()
apps/aecore/lib/aecore/tx/data_tx.ex:537: The call 'Elixir.Aecore.Tx.DataTx':init('Elixir.Aecore.Account.Tx.CoinbaseTx',#{'amount':='false' | 'nil' | 'true' | binary() | [any()] | number() | map(), 'receiver':=_},[],0,'false' | 'nil' | 'true' | binary() | [any()] | number() | map()) breaks the contract (tx_types(),payload(),[binary()] | binary(),non_neg_integer(),integer()) -> 'Elixir.Aecore.Tx.DataTx':t()
apps/aecore/lib/aecore/tx/data_tx.ex:584: The call 'Elixir.Aecore.Tx.DataTx':init('Elixir.Aecore.Oracle.Tx.OracleQueryTx',Vpayload@1::#{'oracle_address':=_, 'query_data':=binary(), 'query_fee':='false' | 'nil' | 'true' | binary() | [any()] | number() | map(), 'query_ttl':=#{'ttl':='false' | 'nil' | 'true' | binary() | [any()] | number() | map(), 'type':='absolute' | 'relative'}, 'response_ttl':=#{'ttl':='false' | 'nil' | 'true' | binary() | [any()] | number() | map(), 'type':='absolute' | 'relative'}},Vsenders@1::any(),'false' | 'nil' | 'true' | binary() | [any()] | number() | map(),'false' | 'nil' | 'true' | binary() | [any()] | number() | map()) breaks the contract (tx_types(),payload(),[binary()] | binary(),non_neg_integer(),integer()) -> 'Elixir.Aecore.Tx.DataTx':t()
apps/aecore/lib/aecore/tx/data_tx.ex:619: The call 'Elixir.Aecore.Tx.DataTx':init('Elixir.Aecore.Oracle.Tx.OracleRegistrationTx',Vpayload@1::#{'query_fee':='false' | 'nil' | 'true' | binary() | [any()] | number() | map(), 'query_format':=binary(), 'response_format':=binary(), 'ttl':=#{'ttl':='false' | 'nil' | 'true' | binary() | [any()] | number() | map(), 'type':='absolute' | 'relative'}},Vsenders@1::any(),'false' | 'nil' | 'true' | binary() | [any()] | number() | map(),'false' | 'nil' | 'true' | binary() | [any()] | number() | map()) breaks the contract (tx_types(),payload(),[binary()] | binary(),non_neg_integer(),integer()) -> 'Elixir.Aecore.Tx.DataTx':t()
apps/aecore/lib/aecore/tx/data_tx.ex:637: The call 'Elixir.Aecore.Tx.DataTx':init('Elixir.Aecore.Oracle.Tx.OracleResponseTx',Vpayload@1::#{'query_id':=binary(), 'response':=binary()},Vsenders@1::any(),'false' | 'nil' | 'true' | binary() | [any()] | number() | map(),'false' | 'nil' | 'true' | binary() | [any()] | number() | map()) breaks the contract (tx_types(),payload(),[binary()] | binary(),non_neg_integer(),integer()) -> 'Elixir.Aecore.Tx.DataTx':t()
apps/aecore/lib/aecore/tx/data_tx.ex:651: The call 'Elixir.Aecore.Tx.DataTx':init('Elixir.Aecore.Oracle.Tx.OracleExtendTx',Vpayload@1::#{'ttl':='false' | 'nil' | 'true' | binary() | [any()] | number() | map()},Vsenders@1::any(),'false' | 'nil' | 'true' | binary() | [any()] | number() | map(),'false' | 'nil' | 'true' | binary() | [any()] | number() | map()) breaks the contract (tx_types(),payload(),[binary()] | binary(),non_neg_integer(),integer()) -> 'Elixir.Aecore.Tx.DataTx':t()