:0: Unknown function 'Elixir.Aewallet.KeyPair':compress/1
:0: Unknown function 'Elixir.Aewallet.KeyPair':derive/2
:0: Unknown function 'Elixir.Aewallet.KeyPair':generate_master_key/1
:0: Unknown function 'Elixir.Aewallet.KeyPair':generate_pub_key/1
:0: Unknown function 'Elixir.Aewallet.Signing':sign/2
:0: Unknown function 'Elixir.Aewallet.Signing':verify/3
:0: Unknown function 'Elixir.Aewallet.Wallet':create_wallet/2
:0: Unknown function 'Elixir.Aewallet.Wallet':get_private_key/3
:0: Unknown function 'Elixir.Aewallet.Wallet':get_public_key/3
:0: Unknown function 'Elixir.Aewallet.Wallet':get_seed/2
:0: Unknown function 'Elixir.ExJsonSchema.Schema':resolve/1
:0: Unknown function 'Elixir.ExJsonSchema.Validator':validate/2
:0: Unknown function 'Elixir.MerklePatriciaTree.DB.ExternalDB':init/1
:0: Unknown function 'Elixir.MerklePatriciaTree.Proof':construct_proof/1
:0: Unknown function 'Elixir.MerklePatriciaTree.Proof':verify_proof/4
:0: Unknown function 'Elixir.MerklePatriciaTree.Trie':delete/2
:0: Unknown function 'Elixir.MerklePatriciaTree.Trie':get/2
:0: Unknown function 'Elixir.MerklePatriciaTree.Trie':new/1
:0: Unknown function 'Elixir.MerklePatriciaTree.Trie':new/2
:0: Unknown function 'Elixir.MerklePatriciaTree.Trie':update/3
:0: Unknown function 'Elixir.Msgpax':'pack!'/1
:0: Unknown function 'Elixir.Msgpax':'pack!'/2
:0: Unknown function 'Elixir.Msgpax':unpack/1
:0: Unknown function base58:base58_to_binary/1
:0: Unknown function base58:binary_to_base58/1
:0: Unknown function enacl:generichash/2
:0: Unknown function sha3:hash/2
:0: Unknown type 'Elixir.Account':t/0
:0: Unknown type 'Elixir.AccountsStateTree':accounts_state/0
:0: Unknown type 'Elixir.Aecore.Account.Account':pubkey/0
:0: Unknown type 'Elixir.Aecore.Chain.ChainState':account/0
:0: Unknown type 'Elixir.Aecore.Chain.ChainState':accounts/0
:0: Unknown type 'Elixir.Aecore.Chain.ChainState':chainstate/0
:0: Unknown type 'Elixir.Aecore.Chain.ChainState':naming/0
:0: Unknown type 'Elixir.Aecore.Chain.Chainstate':account_chainstate/0
:0: Unknown type 'Elixir.Aecore.Chain.Chainstate':accounts/0
:0: Unknown type 'Elixir.Aecore.Chain.Chainstate':chainstate/0
:0: Unknown type 'Elixir.Aecore.Oracle.Oracle':oracles/0
:0: Unknown type 'Elixir.Aecore.Tx.DataTx':paload/0
:0: Unknown type 'Elixir.Block':t/0
:0: Unknown type 'Elixir.ChainState':account/0
:0: Unknown type 'Elixir.ChainState':account_chainstate/0
:0: Unknown type 'Elixir.ChainState':accounts/0
:0: Unknown type 'Elixir.ChainState':chainstate/0
:0: Unknown type 'Elixir.Chainstate':chain_state_types/0
:0: Unknown type 'Elixir.ChannelCreateTx':t/0
:0: Unknown type 'Elixir.ChannelPeerState':t/0
:0: Unknown type 'Elixir.List':t/0
:0: Unknown type 'Elixir.MerklePatriciaTree.Trie':key/0
:0: Unknown type 'Elixir.MerklePatriciaTree.Trie':t/0
:0: Unknown type 'Elixir.MerklePatriciaTree.Trie':value/0
:0: Unknown type 'Elixir.NameCaimTx':t/0
:0: Unknown type 'Elixir.NameClaimTx':t/0
:0: Unknown type 'Elixir.OracleExtendTx':t/0
:0: Unknown type 'Elixir.Signature':t/0
:0: Unknown type 'Elixir.SignedTx':t/0
:0: Unknown type 'Elixir.SpendTx':t/0
Function spend/3 has no local return
Function spend/6 has no local return
The call 'Elixir.Aecore.Account.Account':build_tx(Vpayload@1::#{'amount':=_, 'receiver':=_},'Elixir.Aecore.Account.Tx.SpendTx',Vsender@1::any(),Vsender_priv_key@1::any(),Vfee@1::any(),Vnonce@1::any()) will never return since it differs in the 1st argument from the success typing arguments: (#{'__struct__':=atom(), 'amount'=>non_neg_integer(), 'channel_id'=>binary(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'initiator_amount'=>non_neg_integer(), 'locktime'=>non_neg_integer(), 'name'=>binary(), 'name_salt'=>binary(), 'pointers'=>binary(), 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'receiver'=>binary(), 'responder_amount'=>non_neg_integer(), 'response'=>map(), 'response_format'=>map(), 'state'=>#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOffChain', 'channel_id':=binary(), 'initiator_amount':=non_neg_integer(), 'responder_amount':=non_neg_integer(), 'sequence':=non_neg_integer(), 'signatures':=[binary()]}, 'target'=>binary(), 'ttl'=>non_neg_integer() | #{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'version'=>non_neg_integer()},atom(),binary(),binary(),non_neg_integer(),integer())
Invalid type specification for function 'Elixir.Aecore.Account.Account':pre_claim/3. The success typing is (binary(),binary(),_) -> {'error',<<_:64,_:_*8>>}
Invalid type specification for function 'Elixir.Aecore.Account.Account':pre_claim/6. The success typing is (_,_,binary(),binary(),_,_) -> {'error',<<_:64,_:_*8>>}
The call 'Elixir.Aecore.Account.Account':build_tx(Vpayload@1::#{'commitment':=binary()},'Elixir.Aecore.Naming.Tx.NamePreClaimTx',Vsender@1::any(),Vsender_priv_key@1::any(),Vfee@1::any(),Vnonce@1::any()) will never return since it differs in the 1st argument from the success typing arguments: (#{'__struct__':=atom(), 'amount'=>non_neg_integer(), 'channel_id'=>binary(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'initiator_amount'=>non_neg_integer(), 'locktime'=>non_neg_integer(), 'name'=>binary(), 'name_salt'=>binary(), 'pointers'=>binary(), 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'receiver'=>binary(), 'responder_amount'=>non_neg_integer(), 'response'=>map(), 'response_format'=>map(), 'state'=>#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOffChain', 'channel_id':=binary(), 'initiator_amount':=non_neg_integer(), 'responder_amount':=non_neg_integer(), 'sequence':=non_neg_integer(), 'signatures':=[binary()]}, 'target'=>binary(), 'ttl'=>non_neg_integer() | #{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'version'=>non_neg_integer()},atom(),binary(),binary(),non_neg_integer(),integer())
Invalid type specification for function 'Elixir.Aecore.Account.Account':claim/3. The success typing is (binary(),_,_) -> {'error',<<_:64,_:_*8>>}
Invalid type specification for function 'Elixir.Aecore.Account.Account':claim/6. The success typing is (_,_,binary(),_,_,_) -> {'error',<<_:64,_:_*8>>}
The call 'Elixir.Aecore.Account.Account':build_tx(Vpayload@1::#{'name':=binary(), 'name_salt':=_},'Elixir.Aecore.Naming.Tx.NameClaimTx',Vsender@1::any(),Vsender_priv_key@1::any(),Vfee@1::any(),Vnonce@1::any()) will never return since it differs in the 1st argument from the success typing arguments: (#{'__struct__':=atom(), 'amount'=>non_neg_integer(), 'channel_id'=>binary(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'initiator_amount'=>non_neg_integer(), 'locktime'=>non_neg_integer(), 'name'=>binary(), 'name_salt'=>binary(), 'pointers'=>binary(), 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'receiver'=>binary(), 'responder_amount'=>non_neg_integer(), 'response'=>map(), 'response_format'=>map(), 'state'=>#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOffChain', 'channel_id':=binary(), 'initiator_amount':=non_neg_integer(), 'responder_amount':=non_neg_integer(), 'sequence':=non_neg_integer(), 'signatures':=[binary()]}, 'target'=>binary(), 'ttl'=>non_neg_integer() | #{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'version'=>non_neg_integer()},atom(),binary(),binary(),non_neg_integer(),integer())
Invalid type specification for function 'Elixir.Aecore.Account.Account':name_update/3. The success typing is (binary(),_,_) -> {'error',<<_:64,_:_*8>>}
Invalid type specification for function 'Elixir.Aecore.Account.Account':name_update/6. The success typing is (_,_,binary(),_,_,_) -> {'error',<<_:64,_:_*8>>}
The call 'Elixir.Aecore.Account.Account':build_tx(Vpayload@1::#{'client_ttl':=86400, 'expire_by':=pos_integer(), 'hash':=binary(), 'pointers':=_},'Elixir.Aecore.Naming.Tx.NameUpdateTx',Vsender@1::any(),Vsender_priv_key@1::any(),Vfee@1::any(),Vnonce@1::any()) will never return since it differs in the 1st argument from the success typing arguments: (#{'__struct__':=atom(), 'amount'=>non_neg_integer(), 'channel_id'=>binary(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'initiator_amount'=>non_neg_integer(), 'locktime'=>non_neg_integer(), 'name'=>binary(), 'name_salt'=>binary(), 'pointers'=>binary(), 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'receiver'=>binary(), 'responder_amount'=>non_neg_integer(), 'response'=>map(), 'response_format'=>map(), 'state'=>#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOffChain', 'channel_id':=binary(), 'initiator_amount':=non_neg_integer(), 'responder_amount':=non_neg_integer(), 'sequence':=non_neg_integer(), 'signatures':=[binary()]}, 'target'=>binary(), 'ttl'=>non_neg_integer() | #{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'version'=>non_neg_integer()},atom(),binary(),binary(),non_neg_integer(),integer())
Invalid type specification for function 'Elixir.Aecore.Account.Account':name_transfer/3. The success typing is (binary(),_,_) -> {'error',<<_:64,_:_*8>>}
Invalid type specification for function 'Elixir.Aecore.Account.Account':name_transfer/6. The success typing is (_,_,binary(),_,_,_) -> {'error',<<_:64,_:_*8>>}
The call 'Elixir.Aecore.Account.Account':build_tx(Vpayload@1::#{'hash':=binary(), 'target':=_},'Elixir.Aecore.Naming.Tx.NameTransferTx',Vsender@1::any(),Vsender_priv_key@1::any(),Vfee@1::any(),Vnonce@1::any()) will never return since it differs in the 1st argument from the success typing arguments: (#{'__struct__':=atom(), 'amount'=>non_neg_integer(), 'channel_id'=>binary(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'initiator_amount'=>non_neg_integer(), 'locktime'=>non_neg_integer(), 'name'=>binary(), 'name_salt'=>binary(), 'pointers'=>binary(), 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'receiver'=>binary(), 'responder_amount'=>non_neg_integer(), 'response'=>map(), 'response_format'=>map(), 'state'=>#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOffChain', 'channel_id':=binary(), 'initiator_amount':=non_neg_integer(), 'responder_amount':=non_neg_integer(), 'sequence':=non_neg_integer(), 'signatures':=[binary()]}, 'target'=>binary(), 'ttl'=>non_neg_integer() | #{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'version'=>non_neg_integer()},atom(),binary(),binary(),non_neg_integer(),integer())
Invalid type specification for function 'Elixir.Aecore.Account.Account':name_revoke/2. The success typing is (binary(),_) -> {'error',<<_:64,_:_*8>>}
Invalid type specification for function 'Elixir.Aecore.Account.Account':name_revoke/5. The success typing is (_,_,binary(),_,_) -> {'error',<<_:64,_:_*8>>}
The call 'Elixir.Aecore.Account.Account':build_tx(Vpayload@1::#{'hash':=binary()},'Elixir.Aecore.Naming.Tx.NameRevokeTx',Vsender@1::any(),Vsender_priv_key@1::any(),Vfee@1::any(),Vnonce@1::any()) will never return since it differs in the 1st argument from the success typing arguments: (#{'__struct__':=atom(), 'amount'=>non_neg_integer(), 'channel_id'=>binary(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'initiator_amount'=>non_neg_integer(), 'locktime'=>non_neg_integer(), 'name'=>binary(), 'name_salt'=>binary(), 'pointers'=>binary(), 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'receiver'=>binary(), 'responder_amount'=>non_neg_integer(), 'response'=>map(), 'response_format'=>map(), 'state'=>#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOffChain', 'channel_id':=binary(), 'initiator_amount':=non_neg_integer(), 'responder_amount':=non_neg_integer(), 'sequence':=non_neg_integer(), 'signatures':=[binary()]}, 'target'=>binary(), 'ttl'=>non_neg_integer() | #{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'version'=>non_neg_integer()},atom(),binary(),binary(),non_neg_integer(),integer())
The pattern {'ok', Vacc@1} can never match the type 'none' | binary() | #{'__struct__':='Elixir.Aecore.Account.Account', 'balance':=non_neg_integer(), 'last_updated':=non_neg_integer(), 'nonce':=non_neg_integer()}
The return type #{'__struct__':='Elixir.Aecore.Account.Tx.CoinbaseTx', 'amount':=non_neg_integer(), 'receiver':=binary()} in the specification of init/1 is not a subtype of atom(), which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The inferred return type of init/1 (#{'__struct__':='Elixir.Aecore.Account.Tx.CoinbaseTx', 'amount':=_, 'receiver':=_}) has nothing in common with atom(), which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
Invalid type specification for function 'Elixir.Aecore.Account.Tx.CoinbaseTx':create/2. The success typing is (_,_) -> #{'__struct__':='Elixir.Aecore.Account.Tx.CoinbaseTx', 'amount':=_, 'receiver':=_}
The specified type for the 1st argument of validate/2 (#{'__struct__':='Elixir.Aecore.Account.Tx.CoinbaseTx', 'amount':=non_neg_integer(), 'receiver':=binary()}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The inferred type for the 1st argument of validate/2 (#{'__struct__':='Elixir.Aecore.Account.Tx.CoinbaseTx', 'amount':=_, 'receiver':=_, _=>_}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specified type for the 4th argument of process_chainstate/5 (#{'__struct__':='Elixir.Aecore.Account.Tx.CoinbaseTx', 'amount':=non_neg_integer(), 'receiver':=binary()}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specified type for the 5th argument of preprocess_check/5 (#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=#{'__struct__':=atom(), 'amount'=>non_neg_integer(), 'channel_id'=>binary(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'initiator_amount'=>non_neg_integer(), 'locktime'=>non_neg_integer(), 'name'=>binary(), 'name_salt'=>binary(), 'pointers'=>binary(), 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'receiver'=>binary(), 'responder_amount'=>non_neg_integer(), 'response'=>map(), 'response_format'=>map(), 'state'=>#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOffChain', 'channel_id':=binary(), 'initiator_amount':=non_neg_integer(), 'responder_amount':=non_neg_integer(), 'sequence':=non_neg_integer(), 'signatures':=[binary()]}, 'target'=>binary(), 'ttl'=>non_neg_integer() | #{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'version'=>non_neg_integer()}, 'senders':=[binary()], 'type':=atom()}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specified type for the 3rd argument of deduct_fee/5 (#{'__struct__':='Elixir.Aecore.Account.Tx.CoinbaseTx', 'amount':=non_neg_integer(), 'receiver':=binary()}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The return type #{'__struct__':='Elixir.Aecore.Account.Tx.SpendTx', 'amount':=non_neg_integer(), 'receiver':=binary(), 'version':=non_neg_integer()} in the specification of init/1 is not a subtype of atom(), which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The inferred return type of init/1 (#{'__struct__':='Elixir.Aecore.Account.Tx.SpendTx', 'amount':=_, 'receiver':=_, 'version':=_}) has nothing in common with atom(), which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specified type for the 1st argument of validate/2 (#{'__struct__':='Elixir.Aecore.Account.Tx.SpendTx', 'amount':=non_neg_integer(), 'receiver':=binary(), 'version':=non_neg_integer()}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The inferred type for the 1st argument of validate/2 (#{'__struct__':='Elixir.Aecore.Account.Tx.SpendTx', 'amount':=_, 'receiver':=_, _=>_}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specified type for the 4th argument of process_chainstate/5 (#{'__struct__':='Elixir.Aecore.Account.Tx.SpendTx', 'amount':=non_neg_integer(), 'receiver':=binary(), 'version':=non_neg_integer()}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The inferred type for the 4th argument of process_chainstate/5 (#{'__struct__':='Elixir.Aecore.Account.Tx.SpendTx', 'receiver':=binary(), _=>_}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specified type for the 5th argument of preprocess_check/5 (#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=#{'__struct__':=atom(), 'amount'=>non_neg_integer(), 'channel_id'=>binary(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'initiator_amount'=>non_neg_integer(), 'locktime'=>non_neg_integer(), 'name'=>binary(), 'name_salt'=>binary(), 'pointers'=>binary(), 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'receiver'=>binary(), 'responder_amount'=>non_neg_integer(), 'response'=>map(), 'response_format'=>map(), 'state'=>#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOffChain', 'channel_id':=binary(), 'initiator_amount':=non_neg_integer(), 'responder_amount':=non_neg_integer(), 'sequence':=non_neg_integer(), 'signatures':=[binary()]}, 'target'=>binary(), 'ttl'=>non_neg_integer() | #{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'version'=>non_neg_integer()}, 'senders':=[binary()], 'type':=atom()}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The inferred type for the 5th argument of preprocess_check/5 (#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=#{'__struct__':=atom(), 'amount'=>non_neg_integer(), 'channel_id'=>binary(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'initiator_amount'=>non_neg_integer(), 'locktime'=>non_neg_integer(), 'name'=>binary(), 'name_salt'=>binary(), 'pointers'=>binary(), 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'receiver'=>binary(), 'responder_amount'=>non_neg_integer(), 'response'=>map(), 'response_format'=>map(), 'state'=>#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOffChain', 'channel_id':=binary(), 'initiator_amount':=non_neg_integer(), 'responder_amount':=non_neg_integer(), 'sequence':=non_neg_integer(), 'signatures':=[any()]}, 'target'=>binary(), 'ttl'=>non_neg_integer() | #{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'version'=>non_neg_integer()}, 'senders':=[binary()], 'type':=atom()}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specified type for the 3rd argument of deduct_fee/5 (#{'__struct__':='Elixir.Aecore.Account.Tx.SpendTx', 'amount':=non_neg_integer(), 'receiver':=binary(), 'version':=non_neg_integer()}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
Invalid type specification for function 'Elixir.Aecore.Chain.Chainstate':apply_transaction_on_state/3. The success typing is (_,_,#{'__struct__':='Elixir.Aecore.Tx.SignedTx', 'data':=#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=#{'__struct__':=atom(), 'amount'=>non_neg_integer(), 'channel_id'=>binary(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'initiator_amount'=>non_neg_integer(), 'locktime'=>non_neg_integer(), 'name'=>binary(), 'name_salt'=>binary(), 'pointers'=>binary(), 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'receiver'=>binary(), 'responder_amount'=>non_neg_integer(), 'response'=>map(), 'response_format'=>map(), 'state'=>map(), 'target'=>binary(), 'ttl'=>non_neg_integer() | map(), 'version'=>non_neg_integer()}, 'senders':=[binary()], 'type':=atom()}, 'signatures':=[binary()]}) -> {'error',binary()} | {'ok',_}
Function handle_info/2 has no local return
The call 'Elixir.Aeutil.Serialization':remove_struct(Vchain_states@1::{'error',_} | {'ok',map()}) breaks the contract ([any()]) -> [any()]
    ; (map()) -> map() in the 1st argument
The created fun has no local return
Invalid type specification for function 'Elixir.Aecore.Channel.ChannelStateOffChain':create/4. The success typing is (_,_,_,_) -> #{'__struct__':='Elixir.Aecore.Channel.ChannelStateOffChain', 'channel_id':=_, 'initiator_amount':=_, 'responder_amount':=_, 'sequence':=_, 'signatures':=['nil',...]}
Invalid type specification for function 'Elixir.Aecore.Channel.ChannelStateOffChain':transfer/3. The success typing is (#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOffChain', 'initiator_amount':=number(), 'responder_amount':=number(), 'sequence':=number(), 'signatures':=_, _=>_},'initiator' | 'responder',number()) -> {'ok',#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOffChain', 'initiator_amount':=number(), 'responder_amount':=number(), 'sequence':=number(), 'signatures':=['nil',...], _=>_}}
Function from_open/3 has no local return
The call 'Elixir.Aecore.Channel.ChannelStatePeer':from_state(Vstate@1::#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOffChain', 'channel_id':=_, 'initiator_amount':=_, 'responder_amount':=_, 'sequence':=_, 'signatures':=['nil',...]},Vinitiator_pubkey@1::binary(),Vresponder_pubkey@1::binary(),Vchannel_reserve@1::any(),Vrole@1::any()) breaks the contract ('Elixir.Aecore.Channel.ChannelStateOffChain':t(),'Elixir.Aecore.Wallet.Worker':pubkey(),'Elixir.Aecore.Wallet.Worker':pubkey(),non_neg_integer(),'Elixir.Aecore.Channel.Worker':role()) -> 'Elixir.Aecore.Channel.ChannelStatePeer':t()
Invalid type specification for function 'Elixir.Aecore.Channel.ChannelStatePeer':initialize/5. The success typing is (_,[any(),...],[any(),...],_,_) -> #{'__struct__':='Elixir.Aecore.Channel.ChannelStatePeer', 'channel_reserve':=_, 'fsm_state':='initialized', 'highest_signed_state':='nil', 'highest_state':=#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOffChain', 'channel_id':=_, 'initiator_amount':=_, 'responder_amount':=_, 'sequence':=_, 'signatures':=['nil',...]}, 'initiator_pubkey':=_, 'responder_pubkey':=_, 'role':=_}
Function create_open/5 has no local return
The call 'Elixir.Aecore.Tx.DataTx':init('Elixir.Aecore.Channel.Tx.ChannelCreateTx',#{'initiator_amount':=non_neg_integer(), 'locktime':=_, 'responder_amount':=non_neg_integer()},[binary(),...],Vfee@1::any(),Vnonce@1::non_neg_integer()) breaks the contract (tx_types(),payload(),[binary()] | binary(),non_neg_integer(),integer()) -> 'Elixir.Aecore.Tx.DataTx':t()
The call 'Elixir.Aecore.Channel.ChannelStateOffChain':initiator_amount(Vnew_state@1::#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOffChain', 'initiator_amount':=number(), 'responder_amount':=number(), 'sequence':=number(), 'signatures':=['nil',...], _=>_}) breaks the contract ('Elixir.Aecore.Channel.ChannelStateOffChain':t()) -> non_neg_integer()
Function close/4 has no local return
The call 'Elixir.Aecore.Tx.DataTx':init('Elixir.Aecore.Channel.Tx.ChannelCloseMutalTx',#{'channel_id':=binary(), 'initiator_amount':=non_neg_integer(), 'responder_amount':=non_neg_integer()},[any(),...],Vfee@1::any(),Vnonce@1::any()) breaks the contract (tx_types(),payload(),[binary()] | binary(),non_neg_integer(),integer()) -> 'Elixir.Aecore.Tx.DataTx':t()
Function solo_close/4 has no local return
The call 'Elixir.Aecore.Tx.DataTx':init('Elixir.Aecore.Channel.Tx.ChannelCloseSoloTx',#{'state':=_},binary(),Vfee@1::any(),Vnonce@1::any()) breaks the contract (tx_types(),payload(),[binary()] | binary(),non_neg_integer(),integer()) -> 'Elixir.Aecore.Tx.DataTx':t()
Function slash/5 has no local return
The call 'Elixir.Aecore.Tx.DataTx':init('Elixir.Aecore.Channel.Tx.ChannelSlashTx',#{'state':=_},Vpubkey@1::any(),Vfee@1::any(),Vnonce@1::any()) breaks the contract (tx_types(),payload(),[binary()] | binary(),non_neg_integer(),integer()) -> 'Elixir.Aecore.Tx.DataTx':t()
Function settle/4 has no local return
The call 'Elixir.Aecore.Tx.DataTx':init('Elixir.Aecore.Channel.Tx.ChannelSettleTx',#{'channel_id':=binary()},binary(),Vfee@1::any(),Vnonce@1::any()) breaks the contract (tx_types(),payload(),[binary()] | binary(),non_neg_integer(),integer()) -> 'Elixir.Aecore.Tx.DataTx':t()
The return type #{'__struct__':='Elixir.Aecore.Channel.Tx.ChannelCloseMutalTx', 'channel_id':=binary(), 'initiator_amount':=non_neg_integer(), 'responder_amount':=non_neg_integer()} in the specification of init/1 is not a subtype of atom(), which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
Invalid type specification for function 'Elixir.Aecore.Channel.Tx.ChannelCloseMutalTx':init/1. The success typing is (#{'channel_id':=_, 'initiator_amount':=_, 'responder_amount':=_, _=>_}) -> #{'__struct__':='Elixir.Aecore.Channel.Tx.ChannelCloseMutalTx', 'channel_id':=_, 'initiator_amount':=_, 'responder_amount':=_}
The inferred return type of init/1 (#{'__struct__':='Elixir.Aecore.Channel.Tx.ChannelCloseMutalTx', 'channel_id':=_, 'initiator_amount':=_, 'responder_amount':=_}) has nothing in common with atom(), which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specified type for the 1st argument of validate/2 (#{'__struct__':='Elixir.Aecore.Channel.Tx.ChannelCloseMutalTx', 'channel_id':=binary(), 'initiator_amount':=non_neg_integer(), 'responder_amount':=non_neg_integer()}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The inferred type for the 1st argument of validate/2 (#{'__struct__':='Elixir.Aecore.Channel.Tx.ChannelCloseMutalTx', 'initiator_amount':=number(), 'responder_amount':=number(), _=>_}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specified type for the 4th argument of process_chainstate/5 (#{'__struct__':='Elixir.Aecore.Channel.Tx.ChannelCloseMutalTx', 'channel_id':=binary(), 'initiator_amount':=non_neg_integer(), 'responder_amount':=non_neg_integer()}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The return type {'ok',{_,#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOnChain', 'initiator_amount':=integer(), 'initiator_pubkey':=binary(), 'lock_period':=non_neg_integer(), 'responder_amount':=integer(), 'responder_pubkey':=binary(), 'slash_close':=integer(), 'slash_sequence':=integer()}}} in the specification of process_chainstate/5 is not a subtype of {'error',binary()} | {'ok',{gb_merkle_trees:tree(),map()}}, which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The inferred type for the 4th argument of process_chainstate/5 (#{'__struct__':='Elixir.Aecore.Channel.Tx.ChannelCloseMutalTx', 'channel_id':=_, _=>_}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specified type for the 5th argument of preprocess_check/5 (#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=#{'__struct__':=atom(), 'amount'=>non_neg_integer(), 'channel_id'=>binary(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'initiator_amount'=>non_neg_integer(), 'locktime'=>non_neg_integer(), 'name'=>binary(), 'name_salt'=>binary(), 'pointers'=>binary(), 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'receiver'=>binary(), 'responder_amount'=>non_neg_integer(), 'response'=>map(), 'response_format'=>map(), 'state'=>#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOffChain', 'channel_id':=binary(), 'initiator_amount':=non_neg_integer(), 'responder_amount':=non_neg_integer(), 'sequence':=non_neg_integer(), 'signatures':=[binary()]}, 'target'=>binary(), 'ttl'=>non_neg_integer() | #{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'version'=>non_neg_integer()}, 'senders':=[binary()], 'type':=atom()}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The inferred type for the 5th argument of preprocess_check/5 (#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=#{'__struct__':=atom(), 'amount'=>non_neg_integer(), 'channel_id'=>binary(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'initiator_amount'=>non_neg_integer(), 'locktime'=>non_neg_integer(), 'name'=>binary(), 'name_salt'=>binary(), 'pointers'=>binary(), 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'receiver'=>binary(), 'responder_amount'=>non_neg_integer(), 'response'=>map(), 'response_format'=>map(), 'state'=>#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOffChain', 'channel_id':=binary(), 'initiator_amount':=non_neg_integer(), 'responder_amount':=non_neg_integer(), 'sequence':=non_neg_integer(), 'signatures':=[any()]}, 'target'=>binary(), 'ttl'=>non_neg_integer() | #{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'version'=>non_neg_integer()}, 'senders':=[binary()], 'type':=atom()}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The return type #{'__struct__':='Elixir.Aecore.Channel.Tx.ChannelCloseSoloTx', 'state':=#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOffChain', 'channel_id':=binary(), 'initiator_amount':=non_neg_integer(), 'responder_amount':=non_neg_integer(), 'sequence':=non_neg_integer(), 'signatures':=[binary()]}} in the specification of init/1 is not a subtype of atom(), which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The inferred return type of init/1 (#{'__struct__':='Elixir.Aecore.Channel.Tx.ChannelCloseSoloTx', 'state':=#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOffChain', 'channel_id':=binary(), 'initiator_amount':=non_neg_integer(), 'responder_amount':=non_neg_integer(), 'sequence':=non_neg_integer(), 'signatures':=[binary()]}}) has nothing in common with atom(), which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specified type for the 1st argument of validate/2 (#{'__struct__':='Elixir.Aecore.Channel.Tx.ChannelCloseSoloTx', 'state':=#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOffChain', 'channel_id':=binary(), 'initiator_amount':=non_neg_integer(), 'responder_amount':=non_neg_integer(), 'sequence':=non_neg_integer(), 'signatures':=[binary()]}}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The inferred type for the 1st argument of validate/2 (#{'__struct__':='Elixir.Aecore.Channel.Tx.ChannelCloseSoloTx', _=>_}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specified type for the 4th argument of process_chainstate/5 (#{'__struct__':='Elixir.Aecore.Channel.Tx.ChannelCloseSoloTx', 'state':=#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOffChain', 'channel_id':=binary(), 'initiator_amount':=non_neg_integer(), 'responder_amount':=non_neg_integer(), 'sequence':=non_neg_integer(), 'signatures':=[binary()]}}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The return type {'ok',{_,#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOnChain', 'initiator_amount':=integer(), 'initiator_pubkey':=binary(), 'lock_period':=non_neg_integer(), 'responder_amount':=integer(), 'responder_pubkey':=binary(), 'slash_close':=integer(), 'slash_sequence':=integer()}}} in the specification of process_chainstate/5 is not a subtype of {'error',binary()} | {'ok',{gb_merkle_trees:tree(),map()}}, which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The inferred type for the 4th argument of process_chainstate/5 (#{'__struct__':='Elixir.Aecore.Channel.Tx.ChannelCloseSoloTx', 'state':=#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOffChain', 'channel_id':=binary(), 'initiator_amount':=non_neg_integer(), 'responder_amount':=non_neg_integer(), 'sequence':=non_neg_integer(), 'signatures':=[any()]}, _=>_}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specified type for the 5th argument of preprocess_check/5 (#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=#{'__struct__':=atom(), 'amount'=>non_neg_integer(), 'channel_id'=>binary(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'initiator_amount'=>non_neg_integer(), 'locktime'=>non_neg_integer(), 'name'=>binary(), 'name_salt'=>binary(), 'pointers'=>binary(), 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'receiver'=>binary(), 'responder_amount'=>non_neg_integer(), 'response'=>map(), 'response_format'=>map(), 'state'=>#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOffChain', 'channel_id':=binary(), 'initiator_amount':=non_neg_integer(), 'responder_amount':=non_neg_integer(), 'sequence':=non_neg_integer(), 'signatures':=[binary()]}, 'target'=>binary(), 'ttl'=>non_neg_integer() | #{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'version'=>non_neg_integer()}, 'senders':=[binary()], 'type':=atom()}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The inferred type for the 5th argument of preprocess_check/5 (#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=#{'__struct__':=atom(), 'amount'=>non_neg_integer(), 'channel_id'=>binary(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'initiator_amount'=>non_neg_integer(), 'locktime'=>non_neg_integer(), 'name'=>binary(), 'name_salt'=>binary(), 'pointers'=>binary(), 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'receiver'=>binary(), 'responder_amount'=>non_neg_integer(), 'response'=>map(), 'response_format'=>map(), 'state'=>#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOffChain', 'channel_id':=binary(), 'initiator_amount':=non_neg_integer(), 'responder_amount':=non_neg_integer(), 'sequence':=non_neg_integer(), 'signatures':=[any()]}, 'target'=>binary(), 'ttl'=>non_neg_integer() | #{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'version'=>non_neg_integer()}, 'senders':=[binary()], 'type':=atom()}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The return type #{'__struct__':='Elixir.Aecore.Channel.Tx.ChannelCreateTx', 'initiator_amount':=non_neg_integer(), 'locktime':=non_neg_integer(), 'responder_amount':=non_neg_integer()} in the specification of init/1 is not a subtype of atom(), which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
Invalid type specification for function 'Elixir.Aecore.Channel.Tx.ChannelCreateTx':init/1. The success typing is (#{'initiator_amount':=_, 'locktime':=_, 'responder_amount':=_, _=>_}) -> #{'__struct__':='Elixir.Aecore.Channel.Tx.ChannelCreateTx', 'initiator_amount':=_, 'locktime':=_, 'responder_amount':=_}
The inferred return type of init/1 (#{'__struct__':='Elixir.Aecore.Channel.Tx.ChannelCreateTx', 'initiator_amount':=_, 'locktime':=_, 'responder_amount':=_}) has nothing in common with atom(), which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specified type for the 1st argument of validate/2 (#{'__struct__':='Elixir.Aecore.Channel.Tx.ChannelCreateTx', 'initiator_amount':=non_neg_integer(), 'locktime':=non_neg_integer(), 'responder_amount':=non_neg_integer()}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The inferred type for the 1st argument of validate/2 (#{'__struct__':='Elixir.Aecore.Channel.Tx.ChannelCreateTx', 'initiator_amount':=number(), 'responder_amount':=number(), _=>_}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specified type for the 4th argument of process_chainstate/5 (#{'__struct__':='Elixir.Aecore.Channel.Tx.ChannelCreateTx', 'initiator_amount':=non_neg_integer(), 'locktime':=non_neg_integer(), 'responder_amount':=non_neg_integer()}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The return type {'ok',{_,#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOnChain', 'initiator_amount':=integer(), 'initiator_pubkey':=binary(), 'lock_period':=non_neg_integer(), 'responder_amount':=integer(), 'responder_pubkey':=binary(), 'slash_close':=integer(), 'slash_sequence':=integer()}}} in the specification of process_chainstate/5 is not a subtype of {'error',binary()} | {'ok',{gb_merkle_trees:tree(),map()}}, which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The inferred type for the 4th argument of process_chainstate/5 (#{'__struct__':='Elixir.Aecore.Channel.Tx.ChannelCreateTx', 'initiator_amount':=integer(), 'locktime':=non_neg_integer(), 'responder_amount':=integer(), _=>_}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specified type for the 5th argument of preprocess_check/5 (#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=#{'__struct__':=atom(), 'amount'=>non_neg_integer(), 'channel_id'=>binary(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'initiator_amount'=>non_neg_integer(), 'locktime'=>non_neg_integer(), 'name'=>binary(), 'name_salt'=>binary(), 'pointers'=>binary(), 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'receiver'=>binary(), 'responder_amount'=>non_neg_integer(), 'response'=>map(), 'response_format'=>map(), 'state'=>#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOffChain', 'channel_id':=binary(), 'initiator_amount':=non_neg_integer(), 'responder_amount':=non_neg_integer(), 'sequence':=non_neg_integer(), 'signatures':=[binary()]}, 'target'=>binary(), 'ttl'=>non_neg_integer() | #{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'version'=>non_neg_integer()}, 'senders':=[binary()], 'type':=atom()}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The inferred type for the 5th argument of preprocess_check/5 (#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=#{'__struct__':=atom(), 'amount'=>non_neg_integer(), 'channel_id'=>binary(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'initiator_amount'=>non_neg_integer(), 'locktime'=>non_neg_integer(), 'name'=>binary(), 'name_salt'=>binary(), 'pointers'=>binary(), 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'receiver'=>binary(), 'responder_amount'=>non_neg_integer(), 'response'=>map(), 'response_format'=>map(), 'state'=>#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOffChain', 'channel_id':=binary(), 'initiator_amount':=non_neg_integer(), 'responder_amount':=non_neg_integer(), 'sequence':=non_neg_integer(), 'signatures':=[any()]}, 'target'=>binary(), 'ttl'=>non_neg_integer() | #{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'version'=>non_neg_integer()}, 'senders':=[binary()], 'type':=atom()}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specified type for the 3rd argument of deduct_fee/5 (#{'__struct__':='Elixir.Aecore.Channel.Tx.ChannelCreateTx', 'initiator_amount':=non_neg_integer(), 'locktime':=non_neg_integer(), 'responder_amount':=non_neg_integer()}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The return type any() in the specification of init/1 is not a subtype of atom(), which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The inferred return type of init/1 (#{'__struct__':='Elixir.Aecore.Channel.Tx.ChannelSettleTx', 'channel_id':=_}) has nothing in common with atom(), which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specified type for the 1st argument of validate/2 (#{'__struct__':='Elixir.Aecore.Channel.Tx.ChannelSettleTx', 'channel_id':=binary()}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The inferred type for the 1st argument of validate/2 (#{'__struct__':='Elixir.Aecore.Channel.Tx.ChannelSettleTx', _=>_}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specified type for the 4th argument of process_chainstate/5 (#{'__struct__':='Elixir.Aecore.Channel.Tx.ChannelSettleTx', 'channel_id':=binary()}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The return type {'ok',{_,#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOnChain', 'initiator_amount':=integer(), 'initiator_pubkey':=binary(), 'lock_period':=non_neg_integer(), 'responder_amount':=integer(), 'responder_pubkey':=binary(), 'slash_close':=integer(), 'slash_sequence':=integer()}}} in the specification of process_chainstate/5 is not a subtype of {'error',binary()} | {'ok',{gb_merkle_trees:tree(),map()}}, which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The inferred type for the 4th argument of process_chainstate/5 (#{'__struct__':='Elixir.Aecore.Channel.Tx.ChannelSettleTx', 'channel_id':=_, _=>_}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specified type for the 5th argument of preprocess_check/5 (#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=#{'__struct__':=atom(), 'amount'=>non_neg_integer(), 'channel_id'=>binary(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'initiator_amount'=>non_neg_integer(), 'locktime'=>non_neg_integer(), 'name'=>binary(), 'name_salt'=>binary(), 'pointers'=>binary(), 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'receiver'=>binary(), 'responder_amount'=>non_neg_integer(), 'response'=>map(), 'response_format'=>map(), 'state'=>#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOffChain', 'channel_id':=binary(), 'initiator_amount':=non_neg_integer(), 'responder_amount':=non_neg_integer(), 'sequence':=non_neg_integer(), 'signatures':=[binary()]}, 'target'=>binary(), 'ttl'=>non_neg_integer() | #{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'version'=>non_neg_integer()}, 'senders':=[binary()], 'type':=atom()}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The inferred type for the 5th argument of preprocess_check/5 (#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=#{'__struct__':=atom(), 'amount'=>non_neg_integer(), 'channel_id'=>binary(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'initiator_amount'=>non_neg_integer(), 'locktime'=>non_neg_integer(), 'name'=>binary(), 'name_salt'=>binary(), 'pointers'=>binary(), 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'receiver'=>binary(), 'responder_amount'=>non_neg_integer(), 'response'=>map(), 'response_format'=>map(), 'state'=>#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOffChain', 'channel_id':=binary(), 'initiator_amount':=non_neg_integer(), 'responder_amount':=non_neg_integer(), 'sequence':=non_neg_integer(), 'signatures':=[any()]}, 'target'=>binary(), 'ttl'=>non_neg_integer() | #{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'version'=>non_neg_integer()}, 'senders':=[binary()], 'type':=atom()}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specified type for the 3rd argument of deduct_fee/5 (#{'__struct__':='Elixir.Aecore.Channel.Tx.ChannelSettleTx', 'channel_id':=binary()}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The return type any() in the specification of init/1 is not a subtype of atom(), which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The inferred return type of init/1 (#{'__struct__':='Elixir.Aecore.Channel.Tx.ChannelSlashTx', 'state':=#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOffChain', 'channel_id':=binary(), 'initiator_amount':=non_neg_integer(), 'responder_amount':=non_neg_integer(), 'sequence':=non_neg_integer(), 'signatures':=[binary()]}}) has nothing in common with atom(), which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specified type for the 1st argument of validate/2 (#{'__struct__':='Elixir.Aecore.Channel.Tx.ChannelSlashTx', 'state':=#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOffChain', 'channel_id':=binary(), 'initiator_amount':=non_neg_integer(), 'responder_amount':=non_neg_integer(), 'sequence':=non_neg_integer(), 'signatures':=[binary()]}}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The inferred type for the 1st argument of validate/2 (#{'__struct__':='Elixir.Aecore.Channel.Tx.ChannelSlashTx', 'state':=_, _=>_}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specified type for the 4th argument of process_chainstate/5 (#{'__struct__':='Elixir.Aecore.Channel.Tx.ChannelSlashTx', 'state':=#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOffChain', 'channel_id':=binary(), 'initiator_amount':=non_neg_integer(), 'responder_amount':=non_neg_integer(), 'sequence':=non_neg_integer(), 'signatures':=[binary()]}}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The return type {'ok',{_,#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOnChain', 'initiator_amount':=integer(), 'initiator_pubkey':=binary(), 'lock_period':=non_neg_integer(), 'responder_amount':=integer(), 'responder_pubkey':=binary(), 'slash_close':=integer(), 'slash_sequence':=integer()}}} in the specification of process_chainstate/5 is not a subtype of {'error',binary()} | {'ok',{gb_merkle_trees:tree(),map()}}, which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The inferred type for the 4th argument of process_chainstate/5 (#{'__struct__':='Elixir.Aecore.Channel.Tx.ChannelSlashTx', 'state':=#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOffChain', 'channel_id':=binary(), 'initiator_amount':=non_neg_integer(), 'responder_amount':=non_neg_integer(), 'sequence':=non_neg_integer(), 'signatures':=[any()]}, _=>_}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specified type for the 5th argument of preprocess_check/5 (#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=#{'__struct__':=atom(), 'amount'=>non_neg_integer(), 'channel_id'=>binary(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'initiator_amount'=>non_neg_integer(), 'locktime'=>non_neg_integer(), 'name'=>binary(), 'name_salt'=>binary(), 'pointers'=>binary(), 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'receiver'=>binary(), 'responder_amount'=>non_neg_integer(), 'response'=>map(), 'response_format'=>map(), 'state'=>#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOffChain', 'channel_id':=binary(), 'initiator_amount':=non_neg_integer(), 'responder_amount':=non_neg_integer(), 'sequence':=non_neg_integer(), 'signatures':=[binary()]}, 'target'=>binary(), 'ttl'=>non_neg_integer() | #{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'version'=>non_neg_integer()}, 'senders':=[binary()], 'type':=atom()}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The inferred type for the 5th argument of preprocess_check/5 (#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=#{'__struct__':=atom(), 'amount'=>non_neg_integer(), 'channel_id'=>binary(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'initiator_amount'=>non_neg_integer(), 'locktime'=>non_neg_integer(), 'name'=>binary(), 'name_salt'=>binary(), 'pointers'=>binary(), 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'receiver'=>binary(), 'responder_amount'=>non_neg_integer(), 'response'=>map(), 'response_format'=>map(), 'state'=>#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOffChain', 'channel_id':=binary(), 'initiator_amount':=non_neg_integer(), 'responder_amount':=non_neg_integer(), 'sequence':=non_neg_integer(), 'signatures':=[any()]}, 'target'=>binary(), 'ttl'=>non_neg_integer() | #{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'version'=>non_neg_integer()}, 'senders':=[binary()], 'type':=atom()}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specified type for the 3rd argument of deduct_fee/5 (#{'__struct__':='Elixir.Aecore.Channel.Tx.ChannelSlashTx', 'state':=#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOffChain', 'channel_id':=binary(), 'initiator_amount':=non_neg_integer(), 'responder_amount':=non_neg_integer(), 'sequence':=non_neg_integer(), 'signatures':=[binary()]}}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
Function import_from_open/3 has no local return
The pattern {'ok', Vnew_peer_state@1, Voffchain_state@1} can never match the type {'error',<<_:64,_:_*8>>}
Invalid type specification for function 'Elixir.Aecore.Miner.Worker':candidate/0. The success typing is () -> #{'__struct__':='Elixir.Aecore.Chain.Block', 'header':=#{'__struct__':='Elixir.Aecore.Chain.Header', 'height':=non_neg_integer(), 'nonce':=non_neg_integer(), 'pow_evidence':='nil', 'prev_hash':=binary(), 'root_hash':=binary(), 'target':=non_neg_integer(), 'time':=non_neg_integer(), 'txs_hash':=binary(), 'version':=non_neg_integer()}, 'txs':=[map(),...]}
The call 'Elixir.Aecore.Oracle.Oracle':'tx_ttl_is_valid?'(Vtx@1::#{'__struct__':='Elixir.Aecore.Tx.SignedTx', 'data':=#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=#{'__struct__':=atom(), 'amount'=>non_neg_integer(), 'channel_id'=>binary(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'initiator_amount'=>non_neg_integer(), 'locktime'=>non_neg_integer(), 'name'=>binary(), 'name_salt'=>binary(), 'pointers'=>binary(), 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'receiver'=>binary(), 'responder_amount'=>non_neg_integer(), 'response'=>map(), 'response_format'=>map(), 'state'=>#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOffChain', 'channel_id':=binary(), 'initiator_amount':=non_neg_integer(), 'responder_amount':=non_neg_integer(), 'sequence':=non_neg_integer(), 'signatures':=[binary()]}, 'target'=>binary(), 'ttl'=>non_neg_integer() | #{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'version'=>non_neg_integer()}, 'senders':=[binary()], 'type':=atom()}, 'signatures':=[binary()]},Vblock_height@1::pos_integer()) breaks the contract (oracle_txs_with_ttl(),non_neg_integer()) -> boolean()
Overloaded contract for 'Elixir.Aecore.Naming.NameUtil':validate_label_length/1 has overlapping domains; such contracts are currently unsupported and are simply ignored
The return type #{'__struct__':='Elixir.Aecore.Naming.Tx.NameClaimTx', 'name':=binary(), 'name_salt':=binary()} in the specification of init/1 is not a subtype of atom(), which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The inferred return type of init/1 (#{'__struct__':='Elixir.Aecore.Naming.Tx.NameClaimTx', 'name':=_, 'name_salt':=_}) has nothing in common with atom(), which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specified type for the 1st argument of validate/2 (#{'__struct__':='Elixir.Aecore.Naming.Tx.NameClaimTx', 'name':=binary(), 'name_salt':=binary()}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The inferred type for the 1st argument of validate/2 (#{'__struct__':='Elixir.Aecore.Naming.Tx.NameClaimTx', 'name':=binary(), 'name_salt':=_, _=>_}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specified type for the 4th argument of process_chainstate/5 (#{'__struct__':='Elixir.Aecore.Naming.Tx.NameClaimTx', 'name':=binary(), 'name_salt':=binary()}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The return type {gb_merkle_trees:tree(),_} in the specification of process_chainstate/5 is not a subtype of {'error',binary()} | {'ok',{gb_merkle_trees:tree(),map()}}, which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specification for 'Elixir.Aecore.Naming.Tx.NameClaimTx':process_chainstate/5 has an opaque subtype gb_merkle_trees:tree() which is violated by the success typing (_,map(),non_neg_integer(),#{'__struct__':='Elixir.Aecore.Naming.Tx.NameClaimTx', 'name':=binary(), 'name_salt':=binary(), _=>_},#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=#{'__struct__':=atom(), 'amount'=>non_neg_integer(), 'channel_id'=>binary(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'initiator_amount'=>non_neg_integer(), 'locktime'=>non_neg_integer(), 'name'=>binary(), 'name_salt'=>binary(), 'pointers'=>binary(), 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'receiver'=>binary(), 'responder_amount'=>non_neg_integer(), 'response'=>map(), 'response_format'=>map(), 'state'=>#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOffChain', 'channel_id':=binary(), 'initiator_amount':=non_neg_integer(), 'responder_amount':=non_neg_integer(), 'sequence':=non_neg_integer(), 'signatures':=[any()]}, 'target'=>binary(), 'ttl'=>non_neg_integer() | #{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'version'=>non_neg_integer()}, 'senders':=[binary()], 'type':=atom()}) -> {'ok',{_,map()}}
The inferred type for the 4th argument of process_chainstate/5 (#{'__struct__':='Elixir.Aecore.Naming.Tx.NameClaimTx', 'name':=binary(), 'name_salt':=binary(), _=>_}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specified type for the 5th argument of preprocess_check/5 (#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=#{'__struct__':=atom(), 'amount'=>non_neg_integer(), 'channel_id'=>binary(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'initiator_amount'=>non_neg_integer(), 'locktime'=>non_neg_integer(), 'name'=>binary(), 'name_salt'=>binary(), 'pointers'=>binary(), 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'receiver'=>binary(), 'responder_amount'=>non_neg_integer(), 'response'=>map(), 'response_format'=>map(), 'state'=>#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOffChain', 'channel_id':=binary(), 'initiator_amount':=non_neg_integer(), 'responder_amount':=non_neg_integer(), 'sequence':=non_neg_integer(), 'signatures':=[binary()]}, 'target'=>binary(), 'ttl'=>non_neg_integer() | #{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'version'=>non_neg_integer()}, 'senders':=[binary()], 'type':=atom()}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The inferred type for the 5th argument of preprocess_check/5 (#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=#{'__struct__':=atom(), 'amount'=>non_neg_integer(), 'channel_id'=>binary(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'initiator_amount'=>non_neg_integer(), 'locktime'=>non_neg_integer(), 'name'=>binary(), 'name_salt'=>binary(), 'pointers'=>binary(), 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'receiver'=>binary(), 'responder_amount'=>non_neg_integer(), 'response'=>map(), 'response_format'=>map(), 'state'=>#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOffChain', 'channel_id':=binary(), 'initiator_amount':=non_neg_integer(), 'responder_amount':=non_neg_integer(), 'sequence':=non_neg_integer(), 'signatures':=[any()]}, 'target'=>binary(), 'ttl'=>non_neg_integer() | #{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'version'=>non_neg_integer()}, 'senders':=[binary()], 'type':=atom()}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The return type #{'__struct__':='Elixir.Aecore.Naming.Tx.NamePreClaimTx', 'commitment':=binary()} in the specification of init/1 is not a subtype of atom(), which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The inferred return type of init/1 (#{'__struct__':='Elixir.Aecore.Naming.Tx.NamePreClaimTx', 'commitment':=_}) has nothing in common with atom(), which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specified type for the 1st argument of validate/2 (#{'__struct__':='Elixir.Aecore.Naming.Tx.NamePreClaimTx', 'commitment':=binary()}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The inferred type for the 1st argument of validate/2 (#{'__struct__':='Elixir.Aecore.Naming.Tx.NamePreClaimTx', 'commitment':=bitstring(), _=>_}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The return type {gb_merkle_trees:tree(),_} in the specification of process_chainstate/5 is not a subtype of {'error',binary()} | {'ok',{gb_merkle_trees:tree(),map()}}, which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specification for 'Elixir.Aecore.Naming.Tx.NamePreClaimTx':process_chainstate/5 has an opaque subtype gb_merkle_trees:tree() which is violated by the success typing (_,map(),non_neg_integer(),#{'__struct__':='Elixir.Aecore.Naming.Tx.NamePreClaimTx', 'commitment':=binary(), _=>_},#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=#{'__struct__':=atom(), 'amount'=>non_neg_integer(), 'channel_id'=>binary(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'initiator_amount'=>non_neg_integer(), 'locktime'=>non_neg_integer(), 'name'=>binary(), 'name_salt'=>binary(), 'pointers'=>binary(), 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'receiver'=>binary(), 'responder_amount'=>non_neg_integer(), 'response'=>map(), 'response_format'=>map(), 'state'=>#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOffChain', 'channel_id':=binary(), 'initiator_amount':=non_neg_integer(), 'responder_amount':=non_neg_integer(), 'sequence':=non_neg_integer(), 'signatures':=[any()]}, 'target'=>binary(), 'ttl'=>non_neg_integer() | #{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'version'=>non_neg_integer()}, 'senders':=[binary()], 'type':=atom()}) -> {'ok',{_,map()}}
The inferred type for the 4th argument of process_chainstate/5 (#{'__struct__':='Elixir.Aecore.Naming.Tx.NamePreClaimTx', 'commitment':=binary(), _=>_}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specified type for the 5th argument of preprocess_check/5 (#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=#{'__struct__':=atom(), 'amount'=>non_neg_integer(), 'channel_id'=>binary(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'initiator_amount'=>non_neg_integer(), 'locktime'=>non_neg_integer(), 'name'=>binary(), 'name_salt'=>binary(), 'pointers'=>binary(), 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'receiver'=>binary(), 'responder_amount'=>non_neg_integer(), 'response'=>map(), 'response_format'=>map(), 'state'=>#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOffChain', 'channel_id':=binary(), 'initiator_amount':=non_neg_integer(), 'responder_amount':=non_neg_integer(), 'sequence':=non_neg_integer(), 'signatures':=[binary()]}, 'target'=>binary(), 'ttl'=>non_neg_integer() | #{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'version'=>non_neg_integer()}, 'senders':=[binary()], 'type':=atom()}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The inferred type for the 5th argument of preprocess_check/5 (#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=#{'__struct__':=atom(), 'amount'=>non_neg_integer(), 'channel_id'=>binary(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'initiator_amount'=>non_neg_integer(), 'locktime'=>non_neg_integer(), 'name'=>binary(), 'name_salt'=>binary(), 'pointers'=>binary(), 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'receiver'=>binary(), 'responder_amount'=>non_neg_integer(), 'response'=>map(), 'response_format'=>map(), 'state'=>#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOffChain', 'channel_id':=binary(), 'initiator_amount':=non_neg_integer(), 'responder_amount':=non_neg_integer(), 'sequence':=non_neg_integer(), 'signatures':=[any()]}, 'target'=>binary(), 'ttl'=>non_neg_integer() | #{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'version'=>non_neg_integer()}, 'senders':=[binary()], 'type':=atom()}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The return type #{'__struct__':='Elixir.Aecore.Naming.Tx.NameRevokeTx', 'hash':=binary()} in the specification of init/1 is not a subtype of atom(), which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The inferred return type of init/1 (#{'__struct__':='Elixir.Aecore.Naming.Tx.NameRevokeTx', 'hash':=_}) has nothing in common with atom(), which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specified type for the 1st argument of validate/2 (#{'__struct__':='Elixir.Aecore.Naming.Tx.NameRevokeTx', 'hash':=binary()}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The inferred type for the 1st argument of validate/2 (#{'__struct__':='Elixir.Aecore.Naming.Tx.NameRevokeTx', 'hash':=bitstring(), _=>_}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specified type for the 4th argument of process_chainstate/5 (#{'__struct__':='Elixir.Aecore.Naming.Tx.NameRevokeTx', 'hash':=binary()}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The return type {gb_merkle_trees:tree(),_} in the specification of process_chainstate/5 is not a subtype of {'error',binary()} | {'ok',{gb_merkle_trees:tree(),map()}}, which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specification for 'Elixir.Aecore.Naming.Tx.NameRevokeTx':process_chainstate/5 has an opaque subtype gb_merkle_trees:tree() which is violated by the success typing (_,map(),number(),#{'__struct__':='Elixir.Aecore.Naming.Tx.NameRevokeTx', 'hash':=_, _=>_},_) -> {'ok',{_,map()}}
The inferred type for the 4th argument of process_chainstate/5 (#{'__struct__':='Elixir.Aecore.Naming.Tx.NameRevokeTx', 'hash':=_, _=>_}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specified type for the 5th argument of preprocess_check/5 (#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=#{'__struct__':=atom(), 'amount'=>non_neg_integer(), 'channel_id'=>binary(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'initiator_amount'=>non_neg_integer(), 'locktime'=>non_neg_integer(), 'name'=>binary(), 'name_salt'=>binary(), 'pointers'=>binary(), 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'receiver'=>binary(), 'responder_amount'=>non_neg_integer(), 'response'=>map(), 'response_format'=>map(), 'state'=>#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOffChain', 'channel_id':=binary(), 'initiator_amount':=non_neg_integer(), 'responder_amount':=non_neg_integer(), 'sequence':=non_neg_integer(), 'signatures':=[binary()]}, 'target'=>binary(), 'ttl'=>non_neg_integer() | #{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'version'=>non_neg_integer()}, 'senders':=[binary()], 'type':=atom()}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The inferred type for the 5th argument of preprocess_check/5 (#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=#{'__struct__':=atom(), 'amount'=>non_neg_integer(), 'channel_id'=>binary(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'initiator_amount'=>non_neg_integer(), 'locktime'=>non_neg_integer(), 'name'=>binary(), 'name_salt'=>binary(), 'pointers'=>binary(), 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'receiver'=>binary(), 'responder_amount'=>non_neg_integer(), 'response'=>map(), 'response_format'=>map(), 'state'=>#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOffChain', 'channel_id':=binary(), 'initiator_amount':=non_neg_integer(), 'responder_amount':=non_neg_integer(), 'sequence':=non_neg_integer(), 'signatures':=[any()]}, 'target'=>binary(), 'ttl'=>non_neg_integer() | #{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'version'=>non_neg_integer()}, 'senders':=[binary()], 'type':=atom()}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The return type #{'__struct__':='Elixir.Aecore.Naming.Tx.NameTransferTx', 'hash':=binary(), 'target':=binary()} in the specification of init/1 is not a subtype of atom(), which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The inferred return type of init/1 (#{'__struct__':='Elixir.Aecore.Naming.Tx.NameTransferTx', 'hash':=_, 'target':=_}) has nothing in common with atom(), which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specified type for the 1st argument of validate/2 (#{'__struct__':='Elixir.Aecore.Naming.Tx.NameTransferTx', 'hash':=binary(), 'target':=binary()}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The inferred type for the 1st argument of validate/2 (#{'__struct__':='Elixir.Aecore.Naming.Tx.NameTransferTx', 'hash':=bitstring(), 'target':=_, _=>_}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specified type for the 4th argument of process_chainstate/5 (#{'__struct__':='Elixir.Aecore.Naming.Tx.NameTransferTx', 'hash':=binary(), 'target':=binary()}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The return type {gb_merkle_trees:tree(),_} in the specification of process_chainstate/5 is not a subtype of {'error',binary()} | {'ok',{gb_merkle_trees:tree(),map()}}, which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specification for 'Elixir.Aecore.Naming.Tx.NameTransferTx':process_chainstate/5 has an opaque subtype gb_merkle_trees:tree() which is violated by the success typing (_,map(),_,#{'__struct__':='Elixir.Aecore.Naming.Tx.NameTransferTx', 'hash':=_, 'target':=_, _=>_},_) -> {'ok',{_,map()}}
The inferred type for the 4th argument of process_chainstate/5 (#{'__struct__':='Elixir.Aecore.Naming.Tx.NameTransferTx', 'hash':=_, 'target':=_, _=>_}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specified type for the 5th argument of preprocess_check/5 (#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=#{'__struct__':=atom(), 'amount'=>non_neg_integer(), 'channel_id'=>binary(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'initiator_amount'=>non_neg_integer(), 'locktime'=>non_neg_integer(), 'name'=>binary(), 'name_salt'=>binary(), 'pointers'=>binary(), 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'receiver'=>binary(), 'responder_amount'=>non_neg_integer(), 'response'=>map(), 'response_format'=>map(), 'state'=>#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOffChain', 'channel_id':=binary(), 'initiator_amount':=non_neg_integer(), 'responder_amount':=non_neg_integer(), 'sequence':=non_neg_integer(), 'signatures':=[binary()]}, 'target'=>binary(), 'ttl'=>non_neg_integer() | #{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'version'=>non_neg_integer()}, 'senders':=[binary()], 'type':=atom()}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The inferred type for the 5th argument of preprocess_check/5 (#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=#{'__struct__':=atom(), 'amount'=>non_neg_integer(), 'channel_id'=>binary(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'initiator_amount'=>non_neg_integer(), 'locktime'=>non_neg_integer(), 'name'=>binary(), 'name_salt'=>binary(), 'pointers'=>binary(), 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'receiver'=>binary(), 'responder_amount'=>non_neg_integer(), 'response'=>map(), 'response_format'=>map(), 'state'=>#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOffChain', 'channel_id':=binary(), 'initiator_amount':=non_neg_integer(), 'responder_amount':=non_neg_integer(), 'sequence':=non_neg_integer(), 'signatures':=[any()]}, 'target'=>binary(), 'ttl'=>non_neg_integer() | #{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'version'=>non_neg_integer()}, 'senders':=[binary()], 'type':=atom()}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The return type #{'__struct__':='Elixir.Aecore.Naming.Tx.NameUpdateTx', 'client_ttl':=non_neg_integer(), 'expire_by':=non_neg_integer(), 'hash':=binary(), 'pointers':=binary()} in the specification of init/1 is not a subtype of atom(), which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The inferred return type of init/1 (#{'__struct__':='Elixir.Aecore.Naming.Tx.NameUpdateTx', 'client_ttl':=_, 'expire_by':=_, 'hash':=_, 'pointers':=_}) has nothing in common with atom(), which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specified type for the 1st argument of validate/2 (#{'__struct__':='Elixir.Aecore.Naming.Tx.NameUpdateTx', 'client_ttl':=non_neg_integer(), 'expire_by':=non_neg_integer(), 'hash':=binary(), 'pointers':=binary()}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The inferred type for the 1st argument of validate/2 (#{'__struct__':='Elixir.Aecore.Naming.Tx.NameUpdateTx', 'client_ttl':=_, 'expire_by':=_, 'hash':=_, 'pointers':=_, _=>_}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specified type for the 4th argument of process_chainstate/5 (#{'__struct__':='Elixir.Aecore.Naming.Tx.NameUpdateTx', 'client_ttl':=non_neg_integer(), 'expire_by':=non_neg_integer(), 'hash':=binary(), 'pointers':=binary()}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The return type {gb_merkle_trees:tree(),_} in the specification of process_chainstate/5 is not a subtype of {'error',binary()} | {'ok',{gb_merkle_trees:tree(),map()}}, which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specification for 'Elixir.Aecore.Naming.Tx.NameUpdateTx':process_chainstate/5 has an opaque subtype gb_merkle_trees:tree() which is violated by the success typing (_,map(),_,#{'__struct__':='Elixir.Aecore.Naming.Tx.NameUpdateTx', 'client_ttl':=_, 'expire_by':=_, 'hash':=_, 'pointers':=_, _=>_},_) -> {'ok',{_,map()}}
The inferred type for the 4th argument of process_chainstate/5 (#{'__struct__':='Elixir.Aecore.Naming.Tx.NameUpdateTx', 'client_ttl':=_, 'expire_by':=_, 'hash':=_, 'pointers':=_, _=>_}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specified type for the 5th argument of preprocess_check/5 (#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=#{'__struct__':=atom(), 'amount'=>non_neg_integer(), 'channel_id'=>binary(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'initiator_amount'=>non_neg_integer(), 'locktime'=>non_neg_integer(), 'name'=>binary(), 'name_salt'=>binary(), 'pointers'=>binary(), 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'receiver'=>binary(), 'responder_amount'=>non_neg_integer(), 'response'=>map(), 'response_format'=>map(), 'state'=>#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOffChain', 'channel_id':=binary(), 'initiator_amount':=non_neg_integer(), 'responder_amount':=non_neg_integer(), 'sequence':=non_neg_integer(), 'signatures':=[binary()]}, 'target'=>binary(), 'ttl'=>non_neg_integer() | #{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'version'=>non_neg_integer()}, 'senders':=[binary()], 'type':=atom()}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The inferred type for the 5th argument of preprocess_check/5 (#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=#{'__struct__':=atom(), 'amount'=>non_neg_integer(), 'channel_id'=>binary(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'initiator_amount'=>non_neg_integer(), 'locktime'=>non_neg_integer(), 'name'=>binary(), 'name_salt'=>binary(), 'pointers'=>binary(), 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'receiver'=>binary(), 'responder_amount'=>non_neg_integer(), 'response'=>map(), 'response_format'=>map(), 'state'=>#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOffChain', 'channel_id':=binary(), 'initiator_amount':=non_neg_integer(), 'responder_amount':=non_neg_integer(), 'sequence':=non_neg_integer(), 'signatures':=[any()]}, 'target'=>binary(), 'ttl'=>non_neg_integer() | #{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'version'=>non_neg_integer()}, 'senders':=[binary()], 'type':=atom()}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
Function register/5 has no local return
The call 'Elixir.Aecore.Tx.DataTx':init('Elixir.Aecore.Oracle.Tx.OracleRegistrationTx',Vpayload@1::#{'query_fee':=_, 'query_format':=_, 'response_format':=_, 'ttl':=_},binary(),Vfee@1::any(),non_neg_integer()) breaks the contract (tx_types(),payload(),[binary()] | binary(),non_neg_integer(),integer()) -> 'Elixir.Aecore.Tx.DataTx':t()
Function query/6 has no local return
The call 'Elixir.Aecore.Tx.DataTx':init('Elixir.Aecore.Oracle.Tx.OracleQueryTx',Vpayload@1::#{'oracle_address':=_, 'query_data':=_, 'query_fee':=_, 'query_ttl':=_, 'response_ttl':=_},binary(),Vfee@1::any(),non_neg_integer()) breaks the contract (tx_types(),payload(),[binary()] | binary(),non_neg_integer(),integer()) -> 'Elixir.Aecore.Tx.DataTx':t()
Function respond/3 has no local return
The call 'Elixir.Aecore.Tx.DataTx':init('Elixir.Aecore.Oracle.Tx.OracleResponseTx',Vpayload@1::#{'query_id':=_, 'response':=_},binary(),Vfee@1::any(),non_neg_integer()) breaks the contract (tx_types(),payload(),[binary()] | binary(),non_neg_integer(),integer()) -> 'Elixir.Aecore.Tx.DataTx':t()
Function extend/2 has no local return
The call 'Elixir.Aecore.Tx.DataTx':init('Elixir.Aecore.Oracle.Tx.OracleExtendTx',Vpayload@1::#{'ttl':=_},binary(),Vfee@1::any(),non_neg_integer()) breaks the contract (tx_types(),payload(),[binary()] | binary(),non_neg_integer(),integer()) -> 'Elixir.Aecore.Tx.DataTx':t()
The return type #{'__struct__':='Elixir.Aecore.Oracle.Tx.OracleExtendTx', 'ttl':=non_neg_integer()} in the specification of init/1 is not a subtype of atom(), which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The inferred return type of init/1 (#{'__struct__':='Elixir.Aecore.Oracle.Tx.OracleExtendTx', 'ttl':=_}) has nothing in common with atom(), which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specified type for the 1st argument of validate/2 (#{'__struct__':='Elixir.Aecore.Oracle.Tx.OracleExtendTx', 'ttl':=non_neg_integer()}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The inferred type for the 1st argument of validate/2 (#{'__struct__':='Elixir.Aecore.Oracle.Tx.OracleExtendTx', 'ttl':=_, _=>_}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specified type for the 4th argument of process_chainstate/5 (#{'__struct__':='Elixir.Aecore.Oracle.Tx.OracleExtendTx', 'ttl':=non_neg_integer()}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The return type {_,_} in the specification of process_chainstate/5 is not a subtype of {'error',binary()} | {'ok',{gb_merkle_trees:tree(),map()}}, which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The inferred type for the 4th argument of process_chainstate/5 (#{'__struct__':='Elixir.Aecore.Oracle.Tx.OracleExtendTx', _=>_}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specified type for the 5th argument of preprocess_check/5 (#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=#{'__struct__':=atom(), 'amount'=>non_neg_integer(), 'channel_id'=>binary(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'initiator_amount'=>non_neg_integer(), 'locktime'=>non_neg_integer(), 'name'=>binary(), 'name_salt'=>binary(), 'pointers'=>binary(), 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'receiver'=>binary(), 'responder_amount'=>non_neg_integer(), 'response'=>map(), 'response_format'=>map(), 'state'=>#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOffChain', 'channel_id':=binary(), 'initiator_amount':=non_neg_integer(), 'responder_amount':=non_neg_integer(), 'sequence':=non_neg_integer(), 'signatures':=[binary()]}, 'target'=>binary(), 'ttl'=>non_neg_integer() | #{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'version'=>non_neg_integer()}, 'senders':=[binary()], 'type':=atom()}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The inferred type for the 5th argument of preprocess_check/5 (#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=#{'__struct__':=atom(), 'amount'=>non_neg_integer(), 'channel_id'=>binary(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'initiator_amount'=>non_neg_integer(), 'locktime'=>non_neg_integer(), 'name'=>binary(), 'name_salt'=>binary(), 'pointers'=>binary(), 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'receiver'=>binary(), 'responder_amount'=>non_neg_integer(), 'response'=>map(), 'response_format'=>map(), 'state'=>#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOffChain', 'channel_id':=binary(), 'initiator_amount':=non_neg_integer(), 'responder_amount':=non_neg_integer(), 'sequence':=non_neg_integer(), 'signatures':=[any()]}, 'target'=>binary(), 'ttl'=>non_neg_integer() | #{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'version'=>non_neg_integer()}, 'senders':=[binary()], 'type':=atom()}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specified type for the 3rd argument of deduct_fee/5 (#{'__struct__':='Elixir.Aecore.Oracle.Tx.OracleExtendTx', 'ttl':=non_neg_integer()}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The return type #{'__struct__':='Elixir.Aecore.Oracle.Tx.OracleQueryTx', 'oracle_address':=binary(), 'query_data':=_, 'query_fee':=non_neg_integer(), 'query_ttl':=#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'response_ttl':=#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}} in the specification of init/1 is not a subtype of atom(), which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The inferred return type of init/1 (#{'__struct__':='Elixir.Aecore.Oracle.Tx.OracleQueryTx', 'oracle_address':=_, 'query_data':=_, 'query_fee':=_, 'query_ttl':=_, 'response_ttl':=_}) has nothing in common with atom(), which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specified type for the 1st argument of validate/2 (#{'__struct__':='Elixir.Aecore.Oracle.Tx.OracleQueryTx', 'oracle_address':=binary(), 'query_data':=_, 'query_fee':=non_neg_integer(), 'query_ttl':=#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'response_ttl':=#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The inferred type for the 1st argument of validate/2 (#{'__struct__':='Elixir.Aecore.Oracle.Tx.OracleQueryTx', 'oracle_address':=_, 'query_ttl':=#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'response_ttl':=_, _=>_}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specified type for the 4th argument of process_chainstate/5 (#{'__struct__':='Elixir.Aecore.Oracle.Tx.OracleQueryTx', 'oracle_address':=binary(), 'query_data':=_, 'query_fee':=non_neg_integer(), 'query_ttl':=#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'response_ttl':=#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The return type {_,_} in the specification of process_chainstate/5 is not a subtype of {'error',binary()} | {'ok',{gb_merkle_trees:tree(),map()}}, which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The inferred type for the 4th argument of process_chainstate/5 (#{'__struct__':='Elixir.Aecore.Oracle.Tx.OracleQueryTx', 'oracle_address':=binary(), 'query_data':=_, 'query_fee':=_, 'query_ttl':=#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'response_ttl':=atom() | #{'ttl':=_, _=>_}, _=>_}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specified type for the 5th argument of preprocess_check/5 (#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=#{'__struct__':=atom(), 'amount'=>non_neg_integer(), 'channel_id'=>binary(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'initiator_amount'=>non_neg_integer(), 'locktime'=>non_neg_integer(), 'name'=>binary(), 'name_salt'=>binary(), 'pointers'=>binary(), 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'receiver'=>binary(), 'responder_amount'=>non_neg_integer(), 'response'=>map(), 'response_format'=>map(), 'state'=>#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOffChain', 'channel_id':=binary(), 'initiator_amount':=non_neg_integer(), 'responder_amount':=non_neg_integer(), 'sequence':=non_neg_integer(), 'signatures':=[binary()]}, 'target'=>binary(), 'ttl'=>non_neg_integer() | #{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'version'=>non_neg_integer()}, 'senders':=[binary()], 'type':=atom()}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The inferred type for the 5th argument of preprocess_check/5 (#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=#{'__struct__':=atom(), 'amount'=>non_neg_integer(), 'channel_id'=>binary(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'initiator_amount'=>non_neg_integer(), 'locktime'=>non_neg_integer(), 'name'=>binary(), 'name_salt'=>binary(), 'pointers'=>binary(), 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'receiver'=>binary(), 'responder_amount'=>non_neg_integer(), 'response'=>map(), 'response_format'=>map(), 'state'=>#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOffChain', 'channel_id':=binary(), 'initiator_amount':=non_neg_integer(), 'responder_amount':=non_neg_integer(), 'sequence':=non_neg_integer(), 'signatures':=[any()]}, 'target'=>binary(), 'ttl'=>non_neg_integer() | #{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'version'=>non_neg_integer()}, 'senders':=[binary()], 'type':=atom()}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specified type for the 3rd argument of deduct_fee/5 (#{'__struct__':='Elixir.Aecore.Oracle.Tx.OracleQueryTx', 'oracle_address':=binary(), 'query_data':=_, 'query_fee':=non_neg_integer(), 'query_ttl':=#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'response_ttl':=#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The return type #{'__struct__':='Elixir.Aecore.Oracle.Tx.OracleRegistrationTx', 'query_fee':=non_neg_integer(), 'query_format':=map(), 'response_format':=map(), 'ttl':=#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}} in the specification of init/1 is not a subtype of atom(), which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The inferred return type of init/1 (#{'__struct__':='Elixir.Aecore.Oracle.Tx.OracleRegistrationTx', 'query_fee':=_, 'query_format':=_, 'response_format':=_, 'ttl':=_}) has nothing in common with atom(), which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specified type for the 1st argument of validate/2 (#{'__struct__':='Elixir.Aecore.Oracle.Tx.OracleRegistrationTx', 'query_fee':=non_neg_integer(), 'query_format':=map(), 'response_format':=map(), 'ttl':=#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The inferred type for the 1st argument of validate/2 (#{'__struct__':='Elixir.Aecore.Oracle.Tx.OracleRegistrationTx', 'query_format':=_, 'response_format':=_, 'ttl':=_, _=>_}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specified type for the 4th argument of process_chainstate/5 (#{'__struct__':='Elixir.Aecore.Oracle.Tx.OracleRegistrationTx', 'query_fee':=non_neg_integer(), 'query_format':=map(), 'response_format':=map(), 'ttl':=#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The return type {'ok',{_,_}} in the specification of process_chainstate/5 is not a subtype of {'error',binary()} | {'ok',{gb_merkle_trees:tree(),map()}}, which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The inferred type for the 4th argument of process_chainstate/5 (#{'__struct__':='Elixir.Aecore.Oracle.Tx.OracleRegistrationTx', 'query_fee':=_, 'query_format':=_, 'response_format':=_, 'ttl':=#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, _=>_}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specified type for the 5th argument of preprocess_check/5 (#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=#{'__struct__':=atom(), 'amount'=>non_neg_integer(), 'channel_id'=>binary(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'initiator_amount'=>non_neg_integer(), 'locktime'=>non_neg_integer(), 'name'=>binary(), 'name_salt'=>binary(), 'pointers'=>binary(), 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'receiver'=>binary(), 'responder_amount'=>non_neg_integer(), 'response'=>map(), 'response_format'=>map(), 'state'=>#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOffChain', 'channel_id':=binary(), 'initiator_amount':=non_neg_integer(), 'responder_amount':=non_neg_integer(), 'sequence':=non_neg_integer(), 'signatures':=[binary()]}, 'target'=>binary(), 'ttl'=>non_neg_integer() | #{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'version'=>non_neg_integer()}, 'senders':=[binary()], 'type':=atom()}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The inferred type for the 5th argument of preprocess_check/5 (#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=#{'__struct__':=atom(), 'amount'=>non_neg_integer(), 'channel_id'=>binary(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'initiator_amount'=>non_neg_integer(), 'locktime'=>non_neg_integer(), 'name'=>binary(), 'name_salt'=>binary(), 'pointers'=>binary(), 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'receiver'=>binary(), 'responder_amount'=>non_neg_integer(), 'response'=>map(), 'response_format'=>map(), 'state'=>#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOffChain', 'channel_id':=binary(), 'initiator_amount':=non_neg_integer(), 'responder_amount':=non_neg_integer(), 'sequence':=non_neg_integer(), 'signatures':=[any()]}, 'target'=>binary(), 'ttl'=>non_neg_integer() | #{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'version'=>non_neg_integer()}, 'senders':=[binary()], 'type':=atom()}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The return type #{'__struct__':='Elixir.Aecore.Oracle.Tx.OracleResponseTx', 'query_id':=binary(), 'response':=map()} in the specification of init/1 is not a subtype of atom(), which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The inferred return type of init/1 (#{'__struct__':='Elixir.Aecore.Oracle.Tx.OracleResponseTx', 'query_id':=_, 'response':=_}) has nothing in common with atom(), which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specified type for the 1st argument of validate/2 (#{'__struct__':='Elixir.Aecore.Oracle.Tx.OracleResponseTx', 'query_id':=binary(), 'response':=map()}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The inferred type for the 1st argument of validate/2 (#{'__struct__':='Elixir.Aecore.Oracle.Tx.OracleResponseTx', 'query_id':=_, _=>_}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specified type for the 4th argument of process_chainstate/5 (#{'__struct__':='Elixir.Aecore.Oracle.Tx.OracleResponseTx', 'query_id':=binary(), 'response':=map()}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The return type {'ok',{_,_}} in the specification of process_chainstate/5 is not a subtype of {'error',binary()} | {'ok',{gb_merkle_trees:tree(),map()}}, which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The inferred type for the 4th argument of process_chainstate/5 (#{'__struct__':='Elixir.Aecore.Oracle.Tx.OracleResponseTx', 'query_id':=_, 'response':=_, _=>_}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specified type for the 5th argument of preprocess_check/5 (#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=#{'__struct__':=atom(), 'amount'=>non_neg_integer(), 'channel_id'=>binary(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'initiator_amount'=>non_neg_integer(), 'locktime'=>non_neg_integer(), 'name'=>binary(), 'name_salt'=>binary(), 'pointers'=>binary(), 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'receiver'=>binary(), 'responder_amount'=>non_neg_integer(), 'response'=>map(), 'response_format'=>map(), 'state'=>#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOffChain', 'channel_id':=binary(), 'initiator_amount':=non_neg_integer(), 'responder_amount':=non_neg_integer(), 'sequence':=non_neg_integer(), 'signatures':=[binary()]}, 'target'=>binary(), 'ttl'=>non_neg_integer() | #{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'version'=>non_neg_integer()}, 'senders':=[binary()], 'type':=atom()}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The inferred type for the 5th argument of preprocess_check/5 (#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=#{'__struct__':=atom(), 'amount'=>non_neg_integer(), 'channel_id'=>binary(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'initiator_amount'=>non_neg_integer(), 'locktime'=>non_neg_integer(), 'name'=>binary(), 'name_salt'=>binary(), 'pointers'=>binary(), 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'receiver'=>binary(), 'responder_amount'=>non_neg_integer(), 'response'=>map(), 'response_format'=>map(), 'state'=>#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOffChain', 'channel_id':=binary(), 'initiator_amount':=non_neg_integer(), 'responder_amount':=non_neg_integer(), 'sequence':=non_neg_integer(), 'signatures':=[any()]}, 'target'=>binary(), 'ttl'=>non_neg_integer() | #{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'version'=>non_neg_integer()}, 'senders':=[binary()], 'type':=atom()}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The specified type for the 3rd argument of deduct_fee/5 (#{'__struct__':='Elixir.Aecore.Oracle.Tx.OracleResponseTx', 'query_id':=binary(), 'response':=map()}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The created fun has no local return
The created fun has no local return
The created fun has no local return
The created fun has no local return
The pattern 'error' can never match the type {'error',binary()}
The created fun has no local return
The created fun has no local return
The created fun has no local return
The created fun has no local return
The created fun has no local return
The created fun has no local return
Function trim_peers/1 will never be called
Function check_peer/2 has no local return
Function 'should_a_peer_be_added?'/1 will never be called
The call 'Elixir.Exexec':send(Vospid@1::non_neg_integer(),'eof') breaks the contract (pid() | os_pid(),binary()) -> 'ok'
Guard test '/='(Verror@1::'nil','nil') can never succeed
Invalid type specification for function 'Elixir.Aecore.Tx.DataTx':serialize/1. The success typing is (#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=atom() | binary() | [any()] | map(), 'nonce':=atom() | binary() | [any()] | map(), 'payload':=atom() | binary() | [any()] | map(), 'senders':=[any()], 'type':=atom() | binary() | [any()] | map(), _=>_}) -> #{<<_:24,_:_*8>>=>binary() | [any()]}
The specification for 'Elixir.Aecore.Tx.DataTx':standard_deduct_fee/4 has an opaque subtype gb_merkle_trees:tree() which is violated by the success typing (gb_merkle_trees:tree(),_,#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=#{'__struct__':=atom(), 'amount'=>non_neg_integer(), 'channel_id'=>binary(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'initiator_amount'=>non_neg_integer(), 'locktime'=>non_neg_integer(), 'name'=>binary(), 'name_salt'=>binary(), 'pointers'=>binary(), 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'receiver'=>binary(), 'responder_amount'=>non_neg_integer(), 'response'=>map(), 'response_format'=>map(), 'state'=>map(), 'target'=>binary(), 'ttl'=>non_neg_integer() | map(), 'version'=>non_neg_integer()}, 'senders':=[binary()], 'type':=atom()},_) -> gb_merkle_trees:tree()
The call 'Elixir.Aehttpserver.Web.Notify':broadcast_new_transaction_in_the_pool(Vtx@1::#{'__struct__':='Elixir.Aecore.Tx.SignedTx', 'data':=#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=#{'__struct__':=atom(), 'amount'=>non_neg_integer(), 'channel_id'=>binary(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'initiator_amount'=>non_neg_integer(), 'locktime'=>non_neg_integer(), 'name'=>binary(), 'name_salt'=>binary(), 'pointers'=>binary(), 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'receiver'=>binary(), 'responder_amount'=>non_neg_integer(), 'response'=>map(), 'response_format'=>map(), 'state'=>#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOffChain', 'channel_id':=binary(), 'initiator_amount':=non_neg_integer(), 'responder_amount':=non_neg_integer(), 'sequence':=non_neg_integer(), 'signatures':=[binary()]}, 'target'=>binary(), 'ttl'=>non_neg_integer() | #{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'version'=>non_neg_integer()}, 'senders':=[binary()], 'type':=atom()}, 'signatures':=[binary()]}) will never return since it differs in the 1st argument from the success typing arguments: (#{'__struct__':='Elixir.Aecore.Tx.SignedTx', 'data':=#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=atom() | binary() | [any()] | map(), 'nonce':=atom() | binary() | [any()] | map(), 'payload':=atom() | binary() | [any()] | map(), 'senders':=[any()], 'type':=atom() | binary() | [any()] | map(), _=>_}, 'signatures':=[any()], _=>_})
The created fun has no local return
The pattern #{'txs':=_@2} can never match the type {'error',binary()} | {'ok',#{'__struct__':='Elixir.Aecore.Chain.Block', 'header':=#{'__struct__':='Elixir.Aecore.Chain.Header', 'height':=non_neg_integer(), 'nonce':=non_neg_integer(), 'pow_evidence':=_, 'prev_hash':=binary(), 'root_hash':=binary(), 'target':=non_neg_integer(), 'time':=non_neg_integer(), 'txs_hash':=binary(), 'version':=non_neg_integer()}, 'txs':=[#{'__struct__':='Elixir.Aecore.Tx.SignedTx', 'data':=#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=#{'__struct__':=atom(), 'amount'=>non_neg_integer(), 'channel_id'=>binary(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'initiator_amount'=>non_neg_integer(), 'locktime'=>non_neg_integer(), 'name'=>binary(), 'name_salt'=>binary(), 'pointers'=>binary(), 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'receiver'=>binary(), 'responder_amount'=>non_neg_integer(), 'response'=>map(), 'response_format'=>map(), 'state'=>#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOffChain', 'channel_id':=binary(), 'initiator_amount':=non_neg_integer(), 'responder_amount':=non_neg_integer(), 'sequence':=non_neg_integer(), 'signatures':=[binary()]}, 'target'=>binary(), 'ttl'=>non_neg_integer() | #{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'version'=>non_neg_integer()}, 'senders':=[binary()], 'type':=atom()}, 'signatures':=[binary()]}]}}
Invalid type specification for function 'Elixir.Aecore.Tx.SignedTx':serialize/1. The success typing is (#{'__struct__':='Elixir.Aecore.Tx.SignedTx', 'data':=#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=atom() | binary() | [any()] | map(), 'nonce':=atom() | binary() | [any()] | map(), 'payload':=atom() | binary() | [any()] | map(), 'senders':=[any()], 'type':=atom() | binary() | [any()] | map(), _=>_}, 'signatures':=[any()], _=>_}) -> #{<<_:32,_:_*8>>=>binary() | [any()] | map()}
Overloaded contract for 'Elixir.Aecore.Wallet.Worker':has_wallet/2 has overlapping domains; such contracts are currently unsupported and are simply ignored
Function get_info/1 has no local return
Function get_block/1 has no local return
Function get_raw_blocks/1 has no local return
Function get_pool_txs/1 has no local return
Function send_block/2 has no local return
The call 'Elixir.Aeutil.Serialization':block(Vblock@1::any(),'serialize') will never return since it differs in the 2nd argument from the success typing arguments: (map(),'deserialize')
Function send_tx/2 has no local return
The call 'Elixir.Aehttpclient.Client':post_to_peers(#{#<116>(8, 1, 'integer', ['unsigned', 'big']), #<120>(8, 1, 'integer', ['unsigned', 'big'])}#,Vdata@1::#{<<_:32,_:_*8>>=>binary() | [any()] | map()},Vpeers@1::any()) breaks the contract ('Elixir.String':t(),'Elixir.Aecore.Tx.SignedTx':t(),['Elixir.String':t()]) -> 'ok'
Invalid type specification for function 'Elixir.Aehttpclient.Client':post_to_peers/3. The success typing is (<<_:16>>,#{<<_:32,_:_*8>>=>binary() | [any()] | map()},_) -> 'ok'
Function get_peers/1 has no local return
Function get_and_add_peers/1 has no local return
Function get_account_balance/1 has no local return
Function get_account_txs/1 has no local return
Function get/1 has no local return
Function get/2 has no local return
Function broadcast_new_block_added_to_chain_and_new_mined_tx/1 has no local return
The call 'Elixir.Aeutil.Serialization':block(Vblock@1::atom() | #{'txs':=_, _=>_},'serialize') will never return since it differs in the 2nd argument from the success typing arguments: (map(),'deserialize')
Function block_by_hash/2 has no local return
The call 'Elixir.Aeutil.Serialization':block(Vblock@1::#{'__struct__':='Elixir.Aecore.Chain.Block', 'header':=#{'__struct__':='Elixir.Aecore.Chain.Header', 'height':=non_neg_integer(), 'nonce':=non_neg_integer(), 'pow_evidence':=_, 'prev_hash':=binary(), 'root_hash':=binary(), 'target':=non_neg_integer(), 'time':=non_neg_integer(), 'txs_hash':=binary(), 'version':=non_neg_integer()}, 'txs':=[#{'__struct__':='Elixir.Aecore.Tx.SignedTx', 'data':=#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=#{'__struct__':=atom(), 'amount'=>non_neg_integer(), 'channel_id'=>binary(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'initiator_amount'=>non_neg_integer(), 'locktime'=>non_neg_integer(), 'name'=>binary(), 'name_salt'=>binary(), 'pointers'=>binary(), 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'receiver'=>binary(), 'responder_amount'=>non_neg_integer(), 'response'=>map(), 'response_format'=>map(), 'state'=>#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOffChain', 'channel_id':=binary(), 'initiator_amount':=non_neg_integer(), 'responder_amount':=non_neg_integer(), 'sequence':=non_neg_integer(), 'signatures':=[binary()]}, 'target'=>binary(), 'ttl'=>non_neg_integer() | #{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'version'=>non_neg_integer()}, 'senders':=[binary()], 'type':=atom()}, 'signatures':=[binary()]}]},'serialize') will never return since it differs in the 2nd argument from the success typing arguments: (map(),'deserialize')
The pattern {'error', 'block_not_found'} can never match the type {'error',binary()}
The pattern {'error', 'invalid_hash'} can never match the type {'error',binary()}
The created fun has no local return
The call 'Elixir.Aeutil.Serialization':block(Vblock@1::atom() | #{'header':=_, _=>_},'serialize') will never return since it differs in the 2nd argument from the success typing arguments: (map(),'deserialize')
The created fun has no local return
The call 'Elixir.Aeutil.Serialization':block(Vblock@1::any(),'serialize') will never return since it differs in the 2nd argument from the success typing arguments: (map(),'deserialize')
The pattern {_, Vstate@1} can never match the type 'idle' | 'running'
Function oracle_response/2 has no local return
Function oracle_query/2 has no local return
The call maps:put('proof',Vproof@1::[any()],[map()]) will never return since it differs in the 3rd argument from the success typing arguments: (any(),any(),map())
Overloaded contract for 'Elixir.Aeutil.PatriciaMerkleTree':new/1 has overlapping domains; such contracts are currently unsupported and are simply ignored
The call maps:put(#{#<116>(8, 1, 'integer', ['unsigned', 'big']), #<114>(8, 1, 'integer', ['unsigned', 'big']), #<97>(8, 1, 'integer', ['unsigned', 'big']), #<110>(8, 1, 'integer', ['unsigned', 'big']), #<115>(8, 1, 'integer', ['unsigned', 'big']), #<97>(8, 1, 'integer', ['unsigned', 'big']), #<99>(8, 1, 'integer', ['unsigned', 'big']), #<116>(8, 1, 'integer', ['unsigned', 'big']), #<105>(8, 1, 'integer', ['unsigned', 'big']), #<111>(8, 1, 'integer', ['unsigned', 'big']), #<110>(8, 1, 'integer', ['unsigned', 'big']), #<115>(8, 1, 'integer', ['unsigned', 'big'])}#,Vserialized_txs@1::[any()],Vserialized_header@1::binary()) will never return since it differs in the 3rd argument from the success typing arguments: (any(),any(),map())
:0: Unknown function 'Elixir.MerklePatriciaTree.Trie.Inspector':all_keys/1
apps/aecore/lib/aecore/channel/tx/channel_settle_tx.ex:44: The return type any() in the specification of init/1 is not a subtype of #{'__struct__':=atom(), 'amount'=>non_neg_integer(), 'channel_id'=>binary(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'initiator_amount'=>non_neg_integer(), 'locktime'=>non_neg_integer(), 'name'=>binary(), 'name_salt'=>binary(), 'pointers'=>binary(), 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'receiver'=>binary(), 'responder_amount'=>non_neg_integer(), 'response'=>map(), 'response_format'=>map(), 'state'=>#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOffChain', 'channel_id':=binary(), 'initiator_amount':=non_neg_integer(), 'responder_amount':=non_neg_integer(), 'sequence':=non_neg_integer(), 'signatures':=[binary()]}, 'target'=>binary(), 'ttl'=>non_neg_integer() | #{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'version'=>non_neg_integer()}, which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
apps/aecore/lib/aecore/channel/tx/channel_slash_tx.ex:45: The return type any() in the specification of init/1 is not a subtype of #{'__struct__':=atom(), 'amount'=>non_neg_integer(), 'channel_id'=>binary(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'initiator_amount'=>non_neg_integer(), 'locktime'=>non_neg_integer(), 'name'=>binary(), 'name_salt'=>binary(), 'pointers'=>binary(), 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'receiver'=>binary(), 'responder_amount'=>non_neg_integer(), 'response'=>map(), 'response_format'=>map(), 'state'=>#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOffChain', 'channel_id':=binary(), 'initiator_amount':=non_neg_integer(), 'responder_amount':=non_neg_integer(), 'sequence':=non_neg_integer(), 'signatures':=[binary()]}, 'target'=>binary(), 'ttl'=>non_neg_integer() | #{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'version'=>non_neg_integer()}, which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
apps/aecore/lib/aecore/oracle/tx/oracle_query_tx.ex:52: The return type #{'__struct__':='Elixir.Aecore.Oracle.Tx.OracleQueryTx', 'oracle_address':=binary(), 'query_data':=_, 'query_fee':=non_neg_integer(), 'query_ttl':=#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'response_ttl':=#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}} in the specification of init/1 is not a subtype of #{'__struct__':=atom(), 'amount'=>non_neg_integer(), 'channel_id'=>binary(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'initiator_amount'=>non_neg_integer(), 'locktime'=>non_neg_integer(), 'name'=>binary(), 'name_salt'=>binary(), 'pointers'=>binary(), 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'receiver'=>binary(), 'responder_amount'=>non_neg_integer(), 'response'=>map(), 'response_format'=>map(), 'state'=>#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOffChain', 'channel_id':=binary(), 'initiator_amount':=non_neg_integer(), 'responder_amount':=non_neg_integer(), 'sequence':=non_neg_integer(), 'signatures':=[binary()]}, 'target'=>binary(), 'ttl'=>non_neg_integer() | #{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'version'=>non_neg_integer()}, which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
apps/aecore/lib/aecore/oracle/tx/oracle_query_tx.ex:53: The inferred return type of init/1 (#{'__struct__':='Elixir.Aecore.Oracle.Tx.OracleQueryTx', 'oracle_address':=_, 'query_data':=_, 'query_fee':=_, 'query_ttl':=_, 'response_ttl':=_}) has nothing in common with #{'__struct__':=atom(), 'amount'=>non_neg_integer(), 'channel_id'=>binary(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'initiator_amount'=>non_neg_integer(), 'locktime'=>non_neg_integer(), 'name'=>binary(), 'name_salt'=>binary(), 'pointers'=>binary(), 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'receiver'=>binary(), 'responder_amount'=>non_neg_integer(), 'response'=>map(), 'response_format'=>map(), 'state'=>#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOffChain', 'channel_id':=binary(), 'initiator_amount':=non_neg_integer(), 'responder_amount':=non_neg_integer(), 'sequence':=non_neg_integer(), 'signatures':=[binary()]}, 'target'=>binary(), 'ttl'=>non_neg_integer() | #{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'version'=>non_neg_integer()}, which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
apps/aecore/lib/aecore/oracle/tx/oracle_query_tx.ex:69: The specified type for the 1st argument of validate/2 (#{'__struct__':='Elixir.Aecore.Oracle.Tx.OracleQueryTx', 'oracle_address':=binary(), 'query_data':=_, 'query_fee':=non_neg_integer(), 'query_ttl':=#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'response_ttl':=#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}}) is not a supertype of #{'__struct__':=atom(), 'amount'=>non_neg_integer(), 'channel_id'=>binary(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'initiator_amount'=>non_neg_integer(), 'locktime'=>non_neg_integer(), 'name'=>binary(), 'name_salt'=>binary(), 'pointers'=>binary(), 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'receiver'=>binary(), 'responder_amount'=>non_neg_integer(), 'response'=>map(), 'response_format'=>map(), 'state'=>#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOffChain', 'channel_id':=binary(), 'initiator_amount':=non_neg_integer(), 'responder_amount':=non_neg_integer(), 'sequence':=non_neg_integer(), 'signatures':=[binary()]}, 'target'=>binary(), 'ttl'=>non_neg_integer() | #{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'version'=>non_neg_integer()}, which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
apps/aecore/lib/aecore/oracle/tx/oracle_query_tx.ex:70: The inferred type for the 1st argument of validate/2 (#{'__struct__':='Elixir.Aecore.Oracle.Tx.OracleQueryTx', 'oracle_address':=_, 'query_ttl':=#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'response_ttl':=_, _=>_}) is not a supertype of #{'__struct__':=atom(), 'amount'=>non_neg_integer(), 'channel_id'=>binary(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'initiator_amount'=>non_neg_integer(), 'locktime'=>non_neg_integer(), 'name'=>binary(), 'name_salt'=>binary(), 'pointers'=>binary(), 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'receiver'=>binary(), 'responder_amount'=>non_neg_integer(), 'response'=>map(), 'response_format'=>map(), 'state'=>#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOffChain', 'channel_id':=binary(), 'initiator_amount':=non_neg_integer(), 'responder_amount':=non_neg_integer(), 'sequence':=non_neg_integer(), 'signatures':=[binary()]}, 'target'=>binary(), 'ttl'=>non_neg_integer() | #{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'version'=>non_neg_integer()}, which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
apps/aecore/lib/aecore/oracle/tx/oracle_query_tx.ex:101: The specified type for the 4th argument of process_chainstate/5 (#{'__struct__':='Elixir.Aecore.Oracle.Tx.OracleQueryTx', 'oracle_address':=binary(), 'query_data':=_, 'query_fee':=non_neg_integer(), 'query_ttl':=#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'response_ttl':=#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}}) is not a supertype of #{'__struct__':=atom(), 'amount'=>non_neg_integer(), 'channel_id'=>binary(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'initiator_amount'=>non_neg_integer(), 'locktime'=>non_neg_integer(), 'name'=>binary(), 'name_salt'=>binary(), 'pointers'=>binary(), 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'receiver'=>binary(), 'responder_amount'=>non_neg_integer(), 'response'=>map(), 'response_format'=>map(), 'state'=>#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOffChain', 'channel_id':=binary(), 'initiator_amount':=non_neg_integer(), 'responder_amount':=non_neg_integer(), 'sequence':=non_neg_integer(), 'signatures':=[binary()]}, 'target'=>binary(), 'ttl'=>non_neg_integer() | #{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'version'=>non_neg_integer()}, which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
apps/aecore/lib/aecore/oracle/tx/oracle_query_tx.ex:108: The inferred type for the 4th argument of process_chainstate/5 (#{'__struct__':='Elixir.Aecore.Oracle.Tx.OracleQueryTx', 'oracle_address':=binary(), 'query_data':=_, 'query_fee':=_, 'query_ttl':=#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'response_ttl':=atom() | #{'ttl':=_, _=>_}, _=>_}) is not a supertype of #{'__struct__':=atom(), 'amount'=>non_neg_integer(), 'channel_id'=>binary(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'initiator_amount'=>non_neg_integer(), 'locktime'=>non_neg_integer(), 'name'=>binary(), 'name_salt'=>binary(), 'pointers'=>binary(), 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'receiver'=>binary(), 'responder_amount'=>non_neg_integer(), 'response'=>map(), 'response_format'=>map(), 'state'=>#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOffChain', 'channel_id':=binary(), 'initiator_amount':=non_neg_integer(), 'responder_amount':=non_neg_integer(), 'sequence':=non_neg_integer(), 'signatures':=[binary()]}, 'target'=>binary(), 'ttl'=>non_neg_integer() | #{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'version'=>non_neg_integer()}, which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
apps/aecore/lib/aecore/oracle/tx/oracle_query_tx.ex:147: The specified type for the 4th argument of preprocess_check/5 (#{'__struct__':='Elixir.Aecore.Oracle.Tx.OracleQueryTx', 'oracle_address':=binary(), 'query_data':=_, 'query_fee':=non_neg_integer(), 'query_ttl':=#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'response_ttl':=#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}}) is not a supertype of #{'__struct__':=atom(), 'amount'=>non_neg_integer(), 'channel_id'=>binary(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'initiator_amount'=>non_neg_integer(), 'locktime'=>non_neg_integer(), 'name'=>binary(), 'name_salt'=>binary(), 'pointers'=>binary(), 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'receiver'=>binary(), 'responder_amount'=>non_neg_integer(), 'response'=>map(), 'response_format'=>map(), 'state'=>#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOffChain', 'channel_id':=binary(), 'initiator_amount':=non_neg_integer(), 'responder_amount':=non_neg_integer(), 'sequence':=non_neg_integer(), 'signatures':=[binary()]}, 'target'=>binary(), 'ttl'=>non_neg_integer() | #{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'version'=>non_neg_integer()}, which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
apps/aecore/lib/aecore/oracle/tx/oracle_query_tx.ex:193: The specified type for the 3rd argument of deduct_fee/5 (#{'__struct__':='Elixir.Aecore.Oracle.Tx.OracleQueryTx', 'oracle_address':=binary(), 'query_data':=_, 'query_fee':=non_neg_integer(), 'query_ttl':=#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'response_ttl':=#{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}}) is not a supertype of #{'__struct__':=atom(), 'amount'=>non_neg_integer(), 'channel_id'=>binary(), 'client_ttl'=>non_neg_integer(), 'commitment'=>binary(), 'expire_by'=>non_neg_integer(), 'hash'=>binary(), 'initiator_amount'=>non_neg_integer(), 'locktime'=>non_neg_integer(), 'name'=>binary(), 'name_salt'=>binary(), 'pointers'=>binary(), 'query_fee'=>non_neg_integer(), 'query_format'=>map(), 'query_id'=>binary(), 'receiver'=>binary(), 'responder_amount'=>non_neg_integer(), 'response'=>map(), 'response_format'=>map(), 'state'=>#{'__struct__':='Elixir.Aecore.Channel.ChannelStateOffChain', 'channel_id':=binary(), 'initiator_amount':=non_neg_integer(), 'responder_amount':=non_neg_integer(), 'sequence':=non_neg_integer(), 'signatures':=[binary()]}, 'target'=>binary(), 'ttl'=>non_neg_integer() | #{'ttl':=non_neg_integer(), 'type':='absolute' | 'relative'}, 'version'=>non_neg_integer()}, which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
